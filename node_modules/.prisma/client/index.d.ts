
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Leagues
 * 
 */
export type Leagues = $Result.DefaultSelection<Prisma.$LeaguesPayload>
/**
 * Model UserLeagues
 * 
 */
export type UserLeagues = $Result.DefaultSelection<Prisma.$UserLeaguesPayload>
/**
 * Model Picks
 * 
 */
export type Picks = $Result.DefaultSelection<Prisma.$PicksPayload>
/**
 * Model Games
 * 
 */
export type Games = $Result.DefaultSelection<Prisma.$GamesPayload>
/**
 * Model Teams
 * 
 */
export type Teams = $Result.DefaultSelection<Prisma.$TeamsPayload>
/**
 * Model WeeklyScores
 * 
 */
export type WeeklyScores = $Result.DefaultSelection<Prisma.$WeeklyScoresPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.leagues`: Exposes CRUD operations for the **Leagues** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.leagues.findMany()
    * ```
    */
  get leagues(): Prisma.LeaguesDelegate<ExtArgs>;

  /**
   * `prisma.userLeagues`: Exposes CRUD operations for the **UserLeagues** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLeagues
    * const userLeagues = await prisma.userLeagues.findMany()
    * ```
    */
  get userLeagues(): Prisma.UserLeaguesDelegate<ExtArgs>;

  /**
   * `prisma.picks`: Exposes CRUD operations for the **Picks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Picks
    * const picks = await prisma.picks.findMany()
    * ```
    */
  get picks(): Prisma.PicksDelegate<ExtArgs>;

  /**
   * `prisma.games`: Exposes CRUD operations for the **Games** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.games.findMany()
    * ```
    */
  get games(): Prisma.GamesDelegate<ExtArgs>;

  /**
   * `prisma.teams`: Exposes CRUD operations for the **Teams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.teams.findMany()
    * ```
    */
  get teams(): Prisma.TeamsDelegate<ExtArgs>;

  /**
   * `prisma.weeklyScores`: Exposes CRUD operations for the **WeeklyScores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklyScores
    * const weeklyScores = await prisma.weeklyScores.findMany()
    * ```
    */
  get weeklyScores(): Prisma.WeeklyScoresDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Leagues: 'Leagues',
    UserLeagues: 'UserLeagues',
    Picks: 'Picks',
    Games: 'Games',
    Teams: 'Teams',
    WeeklyScores: 'WeeklyScores'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "leagues" | "userLeagues" | "picks" | "games" | "teams" | "weeklyScores"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Leagues: {
        payload: Prisma.$LeaguesPayload<ExtArgs>
        fields: Prisma.LeaguesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaguesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaguesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          findFirst: {
            args: Prisma.LeaguesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaguesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          findMany: {
            args: Prisma.LeaguesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>[]
          }
          create: {
            args: Prisma.LeaguesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          createMany: {
            args: Prisma.LeaguesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaguesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>[]
          }
          delete: {
            args: Prisma.LeaguesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          update: {
            args: Prisma.LeaguesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          deleteMany: {
            args: Prisma.LeaguesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaguesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaguesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguesPayload>
          }
          aggregate: {
            args: Prisma.LeaguesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeagues>
          }
          groupBy: {
            args: Prisma.LeaguesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaguesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaguesCountArgs<ExtArgs>
            result: $Utils.Optional<LeaguesCountAggregateOutputType> | number
          }
        }
      }
      UserLeagues: {
        payload: Prisma.$UserLeaguesPayload<ExtArgs>
        fields: Prisma.UserLeaguesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLeaguesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLeaguesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          findFirst: {
            args: Prisma.UserLeaguesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLeaguesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          findMany: {
            args: Prisma.UserLeaguesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>[]
          }
          create: {
            args: Prisma.UserLeaguesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          createMany: {
            args: Prisma.UserLeaguesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLeaguesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>[]
          }
          delete: {
            args: Prisma.UserLeaguesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          update: {
            args: Prisma.UserLeaguesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          deleteMany: {
            args: Prisma.UserLeaguesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLeaguesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLeaguesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguesPayload>
          }
          aggregate: {
            args: Prisma.UserLeaguesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLeagues>
          }
          groupBy: {
            args: Prisma.UserLeaguesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLeaguesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLeaguesCountArgs<ExtArgs>
            result: $Utils.Optional<UserLeaguesCountAggregateOutputType> | number
          }
        }
      }
      Picks: {
        payload: Prisma.$PicksPayload<ExtArgs>
        fields: Prisma.PicksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PicksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PicksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          findFirst: {
            args: Prisma.PicksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PicksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          findMany: {
            args: Prisma.PicksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>[]
          }
          create: {
            args: Prisma.PicksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          createMany: {
            args: Prisma.PicksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PicksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>[]
          }
          delete: {
            args: Prisma.PicksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          update: {
            args: Prisma.PicksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          deleteMany: {
            args: Prisma.PicksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PicksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PicksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PicksPayload>
          }
          aggregate: {
            args: Prisma.PicksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePicks>
          }
          groupBy: {
            args: Prisma.PicksGroupByArgs<ExtArgs>
            result: $Utils.Optional<PicksGroupByOutputType>[]
          }
          count: {
            args: Prisma.PicksCountArgs<ExtArgs>
            result: $Utils.Optional<PicksCountAggregateOutputType> | number
          }
        }
      }
      Games: {
        payload: Prisma.$GamesPayload<ExtArgs>
        fields: Prisma.GamesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GamesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GamesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          findFirst: {
            args: Prisma.GamesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GamesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          findMany: {
            args: Prisma.GamesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>[]
          }
          create: {
            args: Prisma.GamesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          createMany: {
            args: Prisma.GamesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GamesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>[]
          }
          delete: {
            args: Prisma.GamesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          update: {
            args: Prisma.GamesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          deleteMany: {
            args: Prisma.GamesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GamesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GamesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamesPayload>
          }
          aggregate: {
            args: Prisma.GamesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGames>
          }
          groupBy: {
            args: Prisma.GamesGroupByArgs<ExtArgs>
            result: $Utils.Optional<GamesGroupByOutputType>[]
          }
          count: {
            args: Prisma.GamesCountArgs<ExtArgs>
            result: $Utils.Optional<GamesCountAggregateOutputType> | number
          }
        }
      }
      Teams: {
        payload: Prisma.$TeamsPayload<ExtArgs>
        fields: Prisma.TeamsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findFirst: {
            args: Prisma.TeamsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          findMany: {
            args: Prisma.TeamsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          create: {
            args: Prisma.TeamsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          createMany: {
            args: Prisma.TeamsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>[]
          }
          delete: {
            args: Prisma.TeamsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          update: {
            args: Prisma.TeamsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          deleteMany: {
            args: Prisma.TeamsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamsPayload>
          }
          aggregate: {
            args: Prisma.TeamsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeams>
          }
          groupBy: {
            args: Prisma.TeamsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamsCountAggregateOutputType> | number
          }
        }
      }
      WeeklyScores: {
        payload: Prisma.$WeeklyScoresPayload<ExtArgs>
        fields: Prisma.WeeklyScoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeeklyScoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeeklyScoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          findFirst: {
            args: Prisma.WeeklyScoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeeklyScoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          findMany: {
            args: Prisma.WeeklyScoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>[]
          }
          create: {
            args: Prisma.WeeklyScoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          createMany: {
            args: Prisma.WeeklyScoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeeklyScoresCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>[]
          }
          delete: {
            args: Prisma.WeeklyScoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          update: {
            args: Prisma.WeeklyScoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          deleteMany: {
            args: Prisma.WeeklyScoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeeklyScoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WeeklyScoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyScoresPayload>
          }
          aggregate: {
            args: Prisma.WeeklyScoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeeklyScores>
          }
          groupBy: {
            args: Prisma.WeeklyScoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeeklyScoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeeklyScoresCountArgs<ExtArgs>
            result: $Utils.Optional<WeeklyScoresCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    picks: number
    userLeagues: number
    weeklyScores: number
    createdLeagues: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | UsersCountOutputTypeCountPicksArgs
    userLeagues?: boolean | UsersCountOutputTypeCountUserLeaguesArgs
    weeklyScores?: boolean | UsersCountOutputTypeCountWeeklyScoresArgs
    createdLeagues?: boolean | UsersCountOutputTypeCountCreatedLeaguesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PicksWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeaguesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWeeklyScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScoresWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCreatedLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaguesWhereInput
  }


  /**
   * Count Type LeaguesCountOutputType
   */

  export type LeaguesCountOutputType = {
    userLeagues: number
  }

  export type LeaguesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userLeagues?: boolean | LeaguesCountOutputTypeCountUserLeaguesArgs
  }

  // Custom InputTypes
  /**
   * LeaguesCountOutputType without action
   */
  export type LeaguesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaguesCountOutputType
     */
    select?: LeaguesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaguesCountOutputType without action
   */
  export type LeaguesCountOutputTypeCountUserLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeaguesWhereInput
  }


  /**
   * Count Type GamesCountOutputType
   */

  export type GamesCountOutputType = {
    picks: number
  }

  export type GamesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | GamesCountOutputTypeCountPicksArgs
  }

  // Custom InputTypes
  /**
   * GamesCountOutputType without action
   */
  export type GamesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamesCountOutputType
     */
    select?: GamesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GamesCountOutputType without action
   */
  export type GamesCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PicksWhereInput
  }


  /**
   * Count Type TeamsCountOutputType
   */

  export type TeamsCountOutputType = {
    home_games: number
    road_games: number
    winning_games: number
    picks: number
  }

  export type TeamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_games?: boolean | TeamsCountOutputTypeCountHome_gamesArgs
    road_games?: boolean | TeamsCountOutputTypeCountRoad_gamesArgs
    winning_games?: boolean | TeamsCountOutputTypeCountWinning_gamesArgs
    picks?: boolean | TeamsCountOutputTypeCountPicksArgs
  }

  // Custom InputTypes
  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamsCountOutputType
     */
    select?: TeamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountHome_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamesWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountRoad_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamesWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountWinning_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamesWhereInput
  }

  /**
   * TeamsCountOutputType without action
   */
  export type TeamsCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PicksWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    picks?: boolean | Users$picksArgs<ExtArgs>
    userLeagues?: boolean | Users$userLeaguesArgs<ExtArgs>
    weeklyScores?: boolean | Users$weeklyScoresArgs<ExtArgs>
    createdLeagues?: boolean | Users$createdLeaguesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | Users$picksArgs<ExtArgs>
    userLeagues?: boolean | Users$userLeaguesArgs<ExtArgs>
    weeklyScores?: boolean | Users$weeklyScoresArgs<ExtArgs>
    createdLeagues?: boolean | Users$createdLeaguesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      picks: Prisma.$PicksPayload<ExtArgs>[]
      userLeagues: Prisma.$UserLeaguesPayload<ExtArgs>[]
      weeklyScores: Prisma.$WeeklyScoresPayload<ExtArgs>[]
      createdLeagues: Prisma.$LeaguesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    picks<T extends Users$picksArgs<ExtArgs> = {}>(args?: Subset<T, Users$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findMany"> | Null>
    userLeagues<T extends Users$userLeaguesArgs<ExtArgs> = {}>(args?: Subset<T, Users$userLeaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findMany"> | Null>
    weeklyScores<T extends Users$weeklyScoresArgs<ExtArgs> = {}>(args?: Subset<T, Users$weeklyScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findMany"> | Null>
    createdLeagues<T extends Users$createdLeaguesArgs<ExtArgs> = {}>(args?: Subset<T, Users$createdLeaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly name: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.picks
   */
  export type Users$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    where?: PicksWhereInput
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    cursor?: PicksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Users.userLeagues
   */
  export type Users$userLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    where?: UserLeaguesWhereInput
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    cursor?: UserLeaguesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLeaguesScalarFieldEnum | UserLeaguesScalarFieldEnum[]
  }

  /**
   * Users.weeklyScores
   */
  export type Users$weeklyScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    where?: WeeklyScoresWhereInput
    orderBy?: WeeklyScoresOrderByWithRelationInput | WeeklyScoresOrderByWithRelationInput[]
    cursor?: WeeklyScoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScoresScalarFieldEnum | WeeklyScoresScalarFieldEnum[]
  }

  /**
   * Users.createdLeagues
   */
  export type Users$createdLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    where?: LeaguesWhereInput
    orderBy?: LeaguesOrderByWithRelationInput | LeaguesOrderByWithRelationInput[]
    cursor?: LeaguesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaguesScalarFieldEnum | LeaguesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Leagues
   */

  export type AggregateLeagues = {
    _count: LeaguesCountAggregateOutputType | null
    _avg: LeaguesAvgAggregateOutputType | null
    _sum: LeaguesSumAggregateOutputType | null
    _min: LeaguesMinAggregateOutputType | null
    _max: LeaguesMaxAggregateOutputType | null
  }

  export type LeaguesAvgAggregateOutputType = {
    id: number | null
    created_by: number | null
  }

  export type LeaguesSumAggregateOutputType = {
    id: number | null
    created_by: number | null
  }

  export type LeaguesMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeaguesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    created_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LeaguesCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LeaguesAvgAggregateInputType = {
    id?: true
    created_by?: true
  }

  export type LeaguesSumAggregateInputType = {
    id?: true
    created_by?: true
  }

  export type LeaguesMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type LeaguesMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type LeaguesCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LeaguesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to aggregate.
     */
    where?: LeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeaguesOrderByWithRelationInput | LeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeaguesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaguesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaguesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaguesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaguesMaxAggregateInputType
  }

  export type GetLeaguesAggregateType<T extends LeaguesAggregateArgs> = {
        [P in keyof T & keyof AggregateLeagues]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeagues[P]>
      : GetScalarType<T[P], AggregateLeagues[P]>
  }




  export type LeaguesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaguesWhereInput
    orderBy?: LeaguesOrderByWithAggregationInput | LeaguesOrderByWithAggregationInput[]
    by: LeaguesScalarFieldEnum[] | LeaguesScalarFieldEnum
    having?: LeaguesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaguesCountAggregateInputType | true
    _avg?: LeaguesAvgAggregateInputType
    _sum?: LeaguesSumAggregateInputType
    _min?: LeaguesMinAggregateInputType
    _max?: LeaguesMaxAggregateInputType
  }

  export type LeaguesGroupByOutputType = {
    id: number
    name: string
    description: string | null
    created_by: number
    created_at: Date
    updated_at: Date
    _count: LeaguesCountAggregateOutputType | null
    _avg: LeaguesAvgAggregateOutputType | null
    _sum: LeaguesSumAggregateOutputType | null
    _min: LeaguesMinAggregateOutputType | null
    _max: LeaguesMaxAggregateOutputType | null
  }

  type GetLeaguesGroupByPayload<T extends LeaguesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaguesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaguesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaguesGroupByOutputType[P]>
            : GetScalarType<T[P], LeaguesGroupByOutputType[P]>
        }
      >
    >


  export type LeaguesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    userLeagues?: boolean | Leagues$userLeaguesArgs<ExtArgs>
    createdByUser?: boolean | UsersDefaultArgs<ExtArgs>
    _count?: boolean | LeaguesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagues"]>

  export type LeaguesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdByUser?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagues"]>

  export type LeaguesSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LeaguesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userLeagues?: boolean | Leagues$userLeaguesArgs<ExtArgs>
    createdByUser?: boolean | UsersDefaultArgs<ExtArgs>
    _count?: boolean | LeaguesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaguesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $LeaguesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Leagues"
    objects: {
      userLeagues: Prisma.$UserLeaguesPayload<ExtArgs>[]
      createdByUser: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      created_by: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["leagues"]>
    composites: {}
  }

  type LeaguesGetPayload<S extends boolean | null | undefined | LeaguesDefaultArgs> = $Result.GetResult<Prisma.$LeaguesPayload, S>

  type LeaguesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaguesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaguesCountAggregateInputType | true
    }

  export interface LeaguesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leagues'], meta: { name: 'Leagues' } }
    /**
     * Find zero or one Leagues that matches the filter.
     * @param {LeaguesFindUniqueArgs} args - Arguments to find a Leagues
     * @example
     * // Get one Leagues
     * const leagues = await prisma.leagues.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaguesFindUniqueArgs>(args: SelectSubset<T, LeaguesFindUniqueArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Leagues that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaguesFindUniqueOrThrowArgs} args - Arguments to find a Leagues
     * @example
     * // Get one Leagues
     * const leagues = await prisma.leagues.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaguesFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaguesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesFindFirstArgs} args - Arguments to find a Leagues
     * @example
     * // Get one Leagues
     * const leagues = await prisma.leagues.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaguesFindFirstArgs>(args?: SelectSubset<T, LeaguesFindFirstArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Leagues that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesFindFirstOrThrowArgs} args - Arguments to find a Leagues
     * @example
     * // Get one Leagues
     * const leagues = await prisma.leagues.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaguesFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaguesFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.leagues.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.leagues.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaguesWithIdOnly = await prisma.leagues.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaguesFindManyArgs>(args?: SelectSubset<T, LeaguesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Leagues.
     * @param {LeaguesCreateArgs} args - Arguments to create a Leagues.
     * @example
     * // Create one Leagues
     * const Leagues = await prisma.leagues.create({
     *   data: {
     *     // ... data to create a Leagues
     *   }
     * })
     * 
     */
    create<T extends LeaguesCreateArgs>(args: SelectSubset<T, LeaguesCreateArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leagues.
     * @param {LeaguesCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const leagues = await prisma.leagues.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaguesCreateManyArgs>(args?: SelectSubset<T, LeaguesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeaguesCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const leagues = await prisma.leagues.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leaguesWithIdOnly = await prisma.leagues.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaguesCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaguesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Leagues.
     * @param {LeaguesDeleteArgs} args - Arguments to delete one Leagues.
     * @example
     * // Delete one Leagues
     * const Leagues = await prisma.leagues.delete({
     *   where: {
     *     // ... filter to delete one Leagues
     *   }
     * })
     * 
     */
    delete<T extends LeaguesDeleteArgs>(args: SelectSubset<T, LeaguesDeleteArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Leagues.
     * @param {LeaguesUpdateArgs} args - Arguments to update one Leagues.
     * @example
     * // Update one Leagues
     * const leagues = await prisma.leagues.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaguesUpdateArgs>(args: SelectSubset<T, LeaguesUpdateArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leagues.
     * @param {LeaguesDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.leagues.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaguesDeleteManyArgs>(args?: SelectSubset<T, LeaguesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const leagues = await prisma.leagues.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaguesUpdateManyArgs>(args: SelectSubset<T, LeaguesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leagues.
     * @param {LeaguesUpsertArgs} args - Arguments to update or create a Leagues.
     * @example
     * // Update or create a Leagues
     * const leagues = await prisma.leagues.upsert({
     *   create: {
     *     // ... data to create a Leagues
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leagues we want to update
     *   }
     * })
     */
    upsert<T extends LeaguesUpsertArgs>(args: SelectSubset<T, LeaguesUpsertArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.leagues.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeaguesCountArgs>(
      args?: Subset<T, LeaguesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaguesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaguesAggregateArgs>(args: Subset<T, LeaguesAggregateArgs>): Prisma.PrismaPromise<GetLeaguesAggregateType<T>>

    /**
     * Group by Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaguesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaguesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaguesGroupByArgs['orderBy'] }
        : { orderBy?: LeaguesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaguesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaguesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Leagues model
   */
  readonly fields: LeaguesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Leagues.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaguesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userLeagues<T extends Leagues$userLeaguesArgs<ExtArgs> = {}>(args?: Subset<T, Leagues$userLeaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findMany"> | Null>
    createdByUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Leagues model
   */ 
  interface LeaguesFieldRefs {
    readonly id: FieldRef<"Leagues", 'Int'>
    readonly name: FieldRef<"Leagues", 'String'>
    readonly description: FieldRef<"Leagues", 'String'>
    readonly created_by: FieldRef<"Leagues", 'Int'>
    readonly created_at: FieldRef<"Leagues", 'DateTime'>
    readonly updated_at: FieldRef<"Leagues", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Leagues findUnique
   */
  export type LeaguesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where: LeaguesWhereUniqueInput
  }

  /**
   * Leagues findUniqueOrThrow
   */
  export type LeaguesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where: LeaguesWhereUniqueInput
  }

  /**
   * Leagues findFirst
   */
  export type LeaguesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeaguesOrderByWithRelationInput | LeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeaguesScalarFieldEnum | LeaguesScalarFieldEnum[]
  }

  /**
   * Leagues findFirstOrThrow
   */
  export type LeaguesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeaguesOrderByWithRelationInput | LeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeaguesScalarFieldEnum | LeaguesScalarFieldEnum[]
  }

  /**
   * Leagues findMany
   */
  export type LeaguesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeaguesOrderByWithRelationInput | LeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeaguesScalarFieldEnum | LeaguesScalarFieldEnum[]
  }

  /**
   * Leagues create
   */
  export type LeaguesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * The data needed to create a Leagues.
     */
    data: XOR<LeaguesCreateInput, LeaguesUncheckedCreateInput>
  }

  /**
   * Leagues createMany
   */
  export type LeaguesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeaguesCreateManyInput | LeaguesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Leagues createManyAndReturn
   */
  export type LeaguesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeaguesCreateManyInput | LeaguesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Leagues update
   */
  export type LeaguesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * The data needed to update a Leagues.
     */
    data: XOR<LeaguesUpdateInput, LeaguesUncheckedUpdateInput>
    /**
     * Choose, which Leagues to update.
     */
    where: LeaguesWhereUniqueInput
  }

  /**
   * Leagues updateMany
   */
  export type LeaguesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeaguesUpdateManyMutationInput, LeaguesUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeaguesWhereInput
  }

  /**
   * Leagues upsert
   */
  export type LeaguesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * The filter to search for the Leagues to update in case it exists.
     */
    where: LeaguesWhereUniqueInput
    /**
     * In case the Leagues found by the `where` argument doesn't exist, create a new Leagues with this data.
     */
    create: XOR<LeaguesCreateInput, LeaguesUncheckedCreateInput>
    /**
     * In case the Leagues was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaguesUpdateInput, LeaguesUncheckedUpdateInput>
  }

  /**
   * Leagues delete
   */
  export type LeaguesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
    /**
     * Filter which Leagues to delete.
     */
    where: LeaguesWhereUniqueInput
  }

  /**
   * Leagues deleteMany
   */
  export type LeaguesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeaguesWhereInput
  }

  /**
   * Leagues.userLeagues
   */
  export type Leagues$userLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    where?: UserLeaguesWhereInput
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    cursor?: UserLeaguesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLeaguesScalarFieldEnum | UserLeaguesScalarFieldEnum[]
  }

  /**
   * Leagues without action
   */
  export type LeaguesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leagues
     */
    select?: LeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaguesInclude<ExtArgs> | null
  }


  /**
   * Model UserLeagues
   */

  export type AggregateUserLeagues = {
    _count: UserLeaguesCountAggregateOutputType | null
    _avg: UserLeaguesAvgAggregateOutputType | null
    _sum: UserLeaguesSumAggregateOutputType | null
    _min: UserLeaguesMinAggregateOutputType | null
    _max: UserLeaguesMaxAggregateOutputType | null
  }

  export type UserLeaguesAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    league_id: number | null
  }

  export type UserLeaguesSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    league_id: number | null
  }

  export type UserLeaguesMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    league_id: number | null
    joined_at: Date | null
  }

  export type UserLeaguesMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    league_id: number | null
    joined_at: Date | null
  }

  export type UserLeaguesCountAggregateOutputType = {
    id: number
    user_id: number
    league_id: number
    joined_at: number
    _all: number
  }


  export type UserLeaguesAvgAggregateInputType = {
    id?: true
    user_id?: true
    league_id?: true
  }

  export type UserLeaguesSumAggregateInputType = {
    id?: true
    user_id?: true
    league_id?: true
  }

  export type UserLeaguesMinAggregateInputType = {
    id?: true
    user_id?: true
    league_id?: true
    joined_at?: true
  }

  export type UserLeaguesMaxAggregateInputType = {
    id?: true
    user_id?: true
    league_id?: true
    joined_at?: true
  }

  export type UserLeaguesCountAggregateInputType = {
    id?: true
    user_id?: true
    league_id?: true
    joined_at?: true
    _all?: true
  }

  export type UserLeaguesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeagues to aggregate.
     */
    where?: UserLeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLeagues
    **/
    _count?: true | UserLeaguesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLeaguesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLeaguesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLeaguesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLeaguesMaxAggregateInputType
  }

  export type GetUserLeaguesAggregateType<T extends UserLeaguesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLeagues]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLeagues[P]>
      : GetScalarType<T[P], AggregateUserLeagues[P]>
  }




  export type UserLeaguesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeaguesWhereInput
    orderBy?: UserLeaguesOrderByWithAggregationInput | UserLeaguesOrderByWithAggregationInput[]
    by: UserLeaguesScalarFieldEnum[] | UserLeaguesScalarFieldEnum
    having?: UserLeaguesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLeaguesCountAggregateInputType | true
    _avg?: UserLeaguesAvgAggregateInputType
    _sum?: UserLeaguesSumAggregateInputType
    _min?: UserLeaguesMinAggregateInputType
    _max?: UserLeaguesMaxAggregateInputType
  }

  export type UserLeaguesGroupByOutputType = {
    id: number
    user_id: number
    league_id: number
    joined_at: Date
    _count: UserLeaguesCountAggregateOutputType | null
    _avg: UserLeaguesAvgAggregateOutputType | null
    _sum: UserLeaguesSumAggregateOutputType | null
    _min: UserLeaguesMinAggregateOutputType | null
    _max: UserLeaguesMaxAggregateOutputType | null
  }

  type GetUserLeaguesGroupByPayload<T extends UserLeaguesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLeaguesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLeaguesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLeaguesGroupByOutputType[P]>
            : GetScalarType<T[P], UserLeaguesGroupByOutputType[P]>
        }
      >
    >


  export type UserLeaguesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    league_id?: boolean
    joined_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    league?: boolean | LeaguesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeagues"]>

  export type UserLeaguesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    league_id?: boolean
    joined_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    league?: boolean | LeaguesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeagues"]>

  export type UserLeaguesSelectScalar = {
    id?: boolean
    user_id?: boolean
    league_id?: boolean
    joined_at?: boolean
  }

  export type UserLeaguesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    league?: boolean | LeaguesDefaultArgs<ExtArgs>
  }
  export type UserLeaguesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    league?: boolean | LeaguesDefaultArgs<ExtArgs>
  }

  export type $UserLeaguesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLeagues"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      league: Prisma.$LeaguesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      league_id: number
      joined_at: Date
    }, ExtArgs["result"]["userLeagues"]>
    composites: {}
  }

  type UserLeaguesGetPayload<S extends boolean | null | undefined | UserLeaguesDefaultArgs> = $Result.GetResult<Prisma.$UserLeaguesPayload, S>

  type UserLeaguesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLeaguesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLeaguesCountAggregateInputType | true
    }

  export interface UserLeaguesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLeagues'], meta: { name: 'UserLeagues' } }
    /**
     * Find zero or one UserLeagues that matches the filter.
     * @param {UserLeaguesFindUniqueArgs} args - Arguments to find a UserLeagues
     * @example
     * // Get one UserLeagues
     * const userLeagues = await prisma.userLeagues.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLeaguesFindUniqueArgs>(args: SelectSubset<T, UserLeaguesFindUniqueArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLeagues that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLeaguesFindUniqueOrThrowArgs} args - Arguments to find a UserLeagues
     * @example
     * // Get one UserLeagues
     * const userLeagues = await prisma.userLeagues.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLeaguesFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLeaguesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLeagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesFindFirstArgs} args - Arguments to find a UserLeagues
     * @example
     * // Get one UserLeagues
     * const userLeagues = await prisma.userLeagues.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLeaguesFindFirstArgs>(args?: SelectSubset<T, UserLeaguesFindFirstArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLeagues that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesFindFirstOrThrowArgs} args - Arguments to find a UserLeagues
     * @example
     * // Get one UserLeagues
     * const userLeagues = await prisma.userLeagues.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLeaguesFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLeaguesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLeagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLeagues
     * const userLeagues = await prisma.userLeagues.findMany()
     * 
     * // Get first 10 UserLeagues
     * const userLeagues = await prisma.userLeagues.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLeaguesWithIdOnly = await prisma.userLeagues.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLeaguesFindManyArgs>(args?: SelectSubset<T, UserLeaguesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLeagues.
     * @param {UserLeaguesCreateArgs} args - Arguments to create a UserLeagues.
     * @example
     * // Create one UserLeagues
     * const UserLeagues = await prisma.userLeagues.create({
     *   data: {
     *     // ... data to create a UserLeagues
     *   }
     * })
     * 
     */
    create<T extends UserLeaguesCreateArgs>(args: SelectSubset<T, UserLeaguesCreateArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLeagues.
     * @param {UserLeaguesCreateManyArgs} args - Arguments to create many UserLeagues.
     * @example
     * // Create many UserLeagues
     * const userLeagues = await prisma.userLeagues.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLeaguesCreateManyArgs>(args?: SelectSubset<T, UserLeaguesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLeagues and returns the data saved in the database.
     * @param {UserLeaguesCreateManyAndReturnArgs} args - Arguments to create many UserLeagues.
     * @example
     * // Create many UserLeagues
     * const userLeagues = await prisma.userLeagues.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLeagues and only return the `id`
     * const userLeaguesWithIdOnly = await prisma.userLeagues.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLeaguesCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLeaguesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserLeagues.
     * @param {UserLeaguesDeleteArgs} args - Arguments to delete one UserLeagues.
     * @example
     * // Delete one UserLeagues
     * const UserLeagues = await prisma.userLeagues.delete({
     *   where: {
     *     // ... filter to delete one UserLeagues
     *   }
     * })
     * 
     */
    delete<T extends UserLeaguesDeleteArgs>(args: SelectSubset<T, UserLeaguesDeleteArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLeagues.
     * @param {UserLeaguesUpdateArgs} args - Arguments to update one UserLeagues.
     * @example
     * // Update one UserLeagues
     * const userLeagues = await prisma.userLeagues.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLeaguesUpdateArgs>(args: SelectSubset<T, UserLeaguesUpdateArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLeagues.
     * @param {UserLeaguesDeleteManyArgs} args - Arguments to filter UserLeagues to delete.
     * @example
     * // Delete a few UserLeagues
     * const { count } = await prisma.userLeagues.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLeaguesDeleteManyArgs>(args?: SelectSubset<T, UserLeaguesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLeagues
     * const userLeagues = await prisma.userLeagues.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLeaguesUpdateManyArgs>(args: SelectSubset<T, UserLeaguesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLeagues.
     * @param {UserLeaguesUpsertArgs} args - Arguments to update or create a UserLeagues.
     * @example
     * // Update or create a UserLeagues
     * const userLeagues = await prisma.userLeagues.upsert({
     *   create: {
     *     // ... data to create a UserLeagues
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLeagues we want to update
     *   }
     * })
     */
    upsert<T extends UserLeaguesUpsertArgs>(args: SelectSubset<T, UserLeaguesUpsertArgs<ExtArgs>>): Prisma__UserLeaguesClient<$Result.GetResult<Prisma.$UserLeaguesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesCountArgs} args - Arguments to filter UserLeagues to count.
     * @example
     * // Count the number of UserLeagues
     * const count = await prisma.userLeagues.count({
     *   where: {
     *     // ... the filter for the UserLeagues we want to count
     *   }
     * })
    **/
    count<T extends UserLeaguesCountArgs>(
      args?: Subset<T, UserLeaguesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLeaguesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLeaguesAggregateArgs>(args: Subset<T, UserLeaguesAggregateArgs>): Prisma.PrismaPromise<GetUserLeaguesAggregateType<T>>

    /**
     * Group by UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeaguesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLeaguesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLeaguesGroupByArgs['orderBy'] }
        : { orderBy?: UserLeaguesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLeaguesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLeaguesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLeagues model
   */
  readonly fields: UserLeaguesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLeagues.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLeaguesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    league<T extends LeaguesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaguesDefaultArgs<ExtArgs>>): Prisma__LeaguesClient<$Result.GetResult<Prisma.$LeaguesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLeagues model
   */ 
  interface UserLeaguesFieldRefs {
    readonly id: FieldRef<"UserLeagues", 'Int'>
    readonly user_id: FieldRef<"UserLeagues", 'Int'>
    readonly league_id: FieldRef<"UserLeagues", 'Int'>
    readonly joined_at: FieldRef<"UserLeagues", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLeagues findUnique
   */
  export type UserLeaguesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where: UserLeaguesWhereUniqueInput
  }

  /**
   * UserLeagues findUniqueOrThrow
   */
  export type UserLeaguesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where: UserLeaguesWhereUniqueInput
  }

  /**
   * UserLeagues findFirst
   */
  export type UserLeaguesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where?: UserLeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeagues.
     */
    cursor?: UserLeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeagues.
     */
    distinct?: UserLeaguesScalarFieldEnum | UserLeaguesScalarFieldEnum[]
  }

  /**
   * UserLeagues findFirstOrThrow
   */
  export type UserLeaguesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where?: UserLeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeagues.
     */
    cursor?: UserLeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeagues.
     */
    distinct?: UserLeaguesScalarFieldEnum | UserLeaguesScalarFieldEnum[]
  }

  /**
   * UserLeagues findMany
   */
  export type UserLeaguesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where?: UserLeaguesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeaguesOrderByWithRelationInput | UserLeaguesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLeagues.
     */
    cursor?: UserLeaguesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    distinct?: UserLeaguesScalarFieldEnum | UserLeaguesScalarFieldEnum[]
  }

  /**
   * UserLeagues create
   */
  export type UserLeaguesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLeagues.
     */
    data: XOR<UserLeaguesCreateInput, UserLeaguesUncheckedCreateInput>
  }

  /**
   * UserLeagues createMany
   */
  export type UserLeaguesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLeagues.
     */
    data: UserLeaguesCreateManyInput | UserLeaguesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLeagues createManyAndReturn
   */
  export type UserLeaguesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserLeagues.
     */
    data: UserLeaguesCreateManyInput | UserLeaguesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLeagues update
   */
  export type UserLeaguesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLeagues.
     */
    data: XOR<UserLeaguesUpdateInput, UserLeaguesUncheckedUpdateInput>
    /**
     * Choose, which UserLeagues to update.
     */
    where: UserLeaguesWhereUniqueInput
  }

  /**
   * UserLeagues updateMany
   */
  export type UserLeaguesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLeagues.
     */
    data: XOR<UserLeaguesUpdateManyMutationInput, UserLeaguesUncheckedUpdateManyInput>
    /**
     * Filter which UserLeagues to update
     */
    where?: UserLeaguesWhereInput
  }

  /**
   * UserLeagues upsert
   */
  export type UserLeaguesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLeagues to update in case it exists.
     */
    where: UserLeaguesWhereUniqueInput
    /**
     * In case the UserLeagues found by the `where` argument doesn't exist, create a new UserLeagues with this data.
     */
    create: XOR<UserLeaguesCreateInput, UserLeaguesUncheckedCreateInput>
    /**
     * In case the UserLeagues was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLeaguesUpdateInput, UserLeaguesUncheckedUpdateInput>
  }

  /**
   * UserLeagues delete
   */
  export type UserLeaguesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
    /**
     * Filter which UserLeagues to delete.
     */
    where: UserLeaguesWhereUniqueInput
  }

  /**
   * UserLeagues deleteMany
   */
  export type UserLeaguesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeagues to delete
     */
    where?: UserLeaguesWhereInput
  }

  /**
   * UserLeagues without action
   */
  export type UserLeaguesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeagues
     */
    select?: UserLeaguesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeaguesInclude<ExtArgs> | null
  }


  /**
   * Model Picks
   */

  export type AggregatePicks = {
    _count: PicksCountAggregateOutputType | null
    _avg: PicksAvgAggregateOutputType | null
    _sum: PicksSumAggregateOutputType | null
    _min: PicksMinAggregateOutputType | null
    _max: PicksMaxAggregateOutputType | null
  }

  export type PicksAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    game_id: number | null
  }

  export type PicksSumAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    game_id: number | null
  }

  export type PicksMinAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    game_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PicksMaxAggregateOutputType = {
    id: number | null
    team_id: number | null
    user_id: number | null
    game_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PicksCountAggregateOutputType = {
    id: number
    team_id: number
    user_id: number
    game_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PicksAvgAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    game_id?: true
  }

  export type PicksSumAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    game_id?: true
  }

  export type PicksMinAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    game_id?: true
    created_at?: true
    updated_at?: true
  }

  export type PicksMaxAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    game_id?: true
    created_at?: true
    updated_at?: true
  }

  export type PicksCountAggregateInputType = {
    id?: true
    team_id?: true
    user_id?: true
    game_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PicksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Picks to aggregate.
     */
    where?: PicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Picks
    **/
    _count?: true | PicksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PicksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PicksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PicksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PicksMaxAggregateInputType
  }

  export type GetPicksAggregateType<T extends PicksAggregateArgs> = {
        [P in keyof T & keyof AggregatePicks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePicks[P]>
      : GetScalarType<T[P], AggregatePicks[P]>
  }




  export type PicksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PicksWhereInput
    orderBy?: PicksOrderByWithAggregationInput | PicksOrderByWithAggregationInput[]
    by: PicksScalarFieldEnum[] | PicksScalarFieldEnum
    having?: PicksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PicksCountAggregateInputType | true
    _avg?: PicksAvgAggregateInputType
    _sum?: PicksSumAggregateInputType
    _min?: PicksMinAggregateInputType
    _max?: PicksMaxAggregateInputType
  }

  export type PicksGroupByOutputType = {
    id: number
    team_id: number
    user_id: number
    game_id: number
    created_at: Date
    updated_at: Date
    _count: PicksCountAggregateOutputType | null
    _avg: PicksAvgAggregateOutputType | null
    _sum: PicksSumAggregateOutputType | null
    _min: PicksMinAggregateOutputType | null
    _max: PicksMaxAggregateOutputType | null
  }

  type GetPicksGroupByPayload<T extends PicksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PicksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PicksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PicksGroupByOutputType[P]>
            : GetScalarType<T[P], PicksGroupByOutputType[P]>
        }
      >
    >


  export type PicksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    game?: boolean | GamesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["picks"]>

  export type PicksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    team?: boolean | TeamsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    game?: boolean | GamesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["picks"]>

  export type PicksSelectScalar = {
    id?: boolean
    team_id?: boolean
    user_id?: boolean
    game_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PicksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    game?: boolean | GamesDefaultArgs<ExtArgs>
  }
  export type PicksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    game?: boolean | GamesDefaultArgs<ExtArgs>
  }

  export type $PicksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Picks"
    objects: {
      team: Prisma.$TeamsPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
      game: Prisma.$GamesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      team_id: number
      user_id: number
      game_id: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["picks"]>
    composites: {}
  }

  type PicksGetPayload<S extends boolean | null | undefined | PicksDefaultArgs> = $Result.GetResult<Prisma.$PicksPayload, S>

  type PicksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PicksFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PicksCountAggregateInputType | true
    }

  export interface PicksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Picks'], meta: { name: 'Picks' } }
    /**
     * Find zero or one Picks that matches the filter.
     * @param {PicksFindUniqueArgs} args - Arguments to find a Picks
     * @example
     * // Get one Picks
     * const picks = await prisma.picks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PicksFindUniqueArgs>(args: SelectSubset<T, PicksFindUniqueArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Picks that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PicksFindUniqueOrThrowArgs} args - Arguments to find a Picks
     * @example
     * // Get one Picks
     * const picks = await prisma.picks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PicksFindUniqueOrThrowArgs>(args: SelectSubset<T, PicksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Picks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksFindFirstArgs} args - Arguments to find a Picks
     * @example
     * // Get one Picks
     * const picks = await prisma.picks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PicksFindFirstArgs>(args?: SelectSubset<T, PicksFindFirstArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Picks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksFindFirstOrThrowArgs} args - Arguments to find a Picks
     * @example
     * // Get one Picks
     * const picks = await prisma.picks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PicksFindFirstOrThrowArgs>(args?: SelectSubset<T, PicksFindFirstOrThrowArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Picks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Picks
     * const picks = await prisma.picks.findMany()
     * 
     * // Get first 10 Picks
     * const picks = await prisma.picks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const picksWithIdOnly = await prisma.picks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PicksFindManyArgs>(args?: SelectSubset<T, PicksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Picks.
     * @param {PicksCreateArgs} args - Arguments to create a Picks.
     * @example
     * // Create one Picks
     * const Picks = await prisma.picks.create({
     *   data: {
     *     // ... data to create a Picks
     *   }
     * })
     * 
     */
    create<T extends PicksCreateArgs>(args: SelectSubset<T, PicksCreateArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Picks.
     * @param {PicksCreateManyArgs} args - Arguments to create many Picks.
     * @example
     * // Create many Picks
     * const picks = await prisma.picks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PicksCreateManyArgs>(args?: SelectSubset<T, PicksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Picks and returns the data saved in the database.
     * @param {PicksCreateManyAndReturnArgs} args - Arguments to create many Picks.
     * @example
     * // Create many Picks
     * const picks = await prisma.picks.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Picks and only return the `id`
     * const picksWithIdOnly = await prisma.picks.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PicksCreateManyAndReturnArgs>(args?: SelectSubset<T, PicksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Picks.
     * @param {PicksDeleteArgs} args - Arguments to delete one Picks.
     * @example
     * // Delete one Picks
     * const Picks = await prisma.picks.delete({
     *   where: {
     *     // ... filter to delete one Picks
     *   }
     * })
     * 
     */
    delete<T extends PicksDeleteArgs>(args: SelectSubset<T, PicksDeleteArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Picks.
     * @param {PicksUpdateArgs} args - Arguments to update one Picks.
     * @example
     * // Update one Picks
     * const picks = await prisma.picks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PicksUpdateArgs>(args: SelectSubset<T, PicksUpdateArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Picks.
     * @param {PicksDeleteManyArgs} args - Arguments to filter Picks to delete.
     * @example
     * // Delete a few Picks
     * const { count } = await prisma.picks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PicksDeleteManyArgs>(args?: SelectSubset<T, PicksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Picks
     * const picks = await prisma.picks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PicksUpdateManyArgs>(args: SelectSubset<T, PicksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Picks.
     * @param {PicksUpsertArgs} args - Arguments to update or create a Picks.
     * @example
     * // Update or create a Picks
     * const picks = await prisma.picks.upsert({
     *   create: {
     *     // ... data to create a Picks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Picks we want to update
     *   }
     * })
     */
    upsert<T extends PicksUpsertArgs>(args: SelectSubset<T, PicksUpsertArgs<ExtArgs>>): Prisma__PicksClient<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksCountArgs} args - Arguments to filter Picks to count.
     * @example
     * // Count the number of Picks
     * const count = await prisma.picks.count({
     *   where: {
     *     // ... the filter for the Picks we want to count
     *   }
     * })
    **/
    count<T extends PicksCountArgs>(
      args?: Subset<T, PicksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PicksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PicksAggregateArgs>(args: Subset<T, PicksAggregateArgs>): Prisma.PrismaPromise<GetPicksAggregateType<T>>

    /**
     * Group by Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PicksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PicksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PicksGroupByArgs['orderBy'] }
        : { orderBy?: PicksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PicksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPicksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Picks model
   */
  readonly fields: PicksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Picks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PicksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamsDefaultArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GamesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GamesDefaultArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Picks model
   */ 
  interface PicksFieldRefs {
    readonly id: FieldRef<"Picks", 'Int'>
    readonly team_id: FieldRef<"Picks", 'Int'>
    readonly user_id: FieldRef<"Picks", 'Int'>
    readonly game_id: FieldRef<"Picks", 'Int'>
    readonly created_at: FieldRef<"Picks", 'DateTime'>
    readonly updated_at: FieldRef<"Picks", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Picks findUnique
   */
  export type PicksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where: PicksWhereUniqueInput
  }

  /**
   * Picks findUniqueOrThrow
   */
  export type PicksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where: PicksWhereUniqueInput
  }

  /**
   * Picks findFirst
   */
  export type PicksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where?: PicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Picks findFirstOrThrow
   */
  export type PicksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where?: PicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Picks findMany
   */
  export type PicksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where?: PicksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Picks.
     */
    cursor?: PicksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Picks create
   */
  export type PicksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * The data needed to create a Picks.
     */
    data: XOR<PicksCreateInput, PicksUncheckedCreateInput>
  }

  /**
   * Picks createMany
   */
  export type PicksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Picks.
     */
    data: PicksCreateManyInput | PicksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Picks createManyAndReturn
   */
  export type PicksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Picks.
     */
    data: PicksCreateManyInput | PicksCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Picks update
   */
  export type PicksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * The data needed to update a Picks.
     */
    data: XOR<PicksUpdateInput, PicksUncheckedUpdateInput>
    /**
     * Choose, which Picks to update.
     */
    where: PicksWhereUniqueInput
  }

  /**
   * Picks updateMany
   */
  export type PicksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Picks.
     */
    data: XOR<PicksUpdateManyMutationInput, PicksUncheckedUpdateManyInput>
    /**
     * Filter which Picks to update
     */
    where?: PicksWhereInput
  }

  /**
   * Picks upsert
   */
  export type PicksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * The filter to search for the Picks to update in case it exists.
     */
    where: PicksWhereUniqueInput
    /**
     * In case the Picks found by the `where` argument doesn't exist, create a new Picks with this data.
     */
    create: XOR<PicksCreateInput, PicksUncheckedCreateInput>
    /**
     * In case the Picks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PicksUpdateInput, PicksUncheckedUpdateInput>
  }

  /**
   * Picks delete
   */
  export type PicksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    /**
     * Filter which Picks to delete.
     */
    where: PicksWhereUniqueInput
  }

  /**
   * Picks deleteMany
   */
  export type PicksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Picks to delete
     */
    where?: PicksWhereInput
  }

  /**
   * Picks without action
   */
  export type PicksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
  }


  /**
   * Model Games
   */

  export type AggregateGames = {
    _count: GamesCountAggregateOutputType | null
    _avg: GamesAvgAggregateOutputType | null
    _sum: GamesSumAggregateOutputType | null
    _min: GamesMinAggregateOutputType | null
    _max: GamesMaxAggregateOutputType | null
  }

  export type GamesAvgAggregateOutputType = {
    id: number | null
    year: number | null
    week: number | null
    home_team_id: number | null
    road_team_id: number | null
    winning_team_id: number | null
    home_score: number | null
    road_score: number | null
  }

  export type GamesSumAggregateOutputType = {
    id: number | null
    year: number | null
    week: number | null
    home_team_id: number | null
    road_team_id: number | null
    winning_team_id: number | null
    home_score: number | null
    road_score: number | null
  }

  export type GamesMinAggregateOutputType = {
    id: number | null
    year: number | null
    week: number | null
    home_team_id: number | null
    road_team_id: number | null
    stadium: string | null
    time: Date | null
    winning_team_id: number | null
    home_score: number | null
    road_score: number | null
    is_finalized: boolean | null
    updated_at: Date | null
  }

  export type GamesMaxAggregateOutputType = {
    id: number | null
    year: number | null
    week: number | null
    home_team_id: number | null
    road_team_id: number | null
    stadium: string | null
    time: Date | null
    winning_team_id: number | null
    home_score: number | null
    road_score: number | null
    is_finalized: boolean | null
    updated_at: Date | null
  }

  export type GamesCountAggregateOutputType = {
    id: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: number
    time: number
    winning_team_id: number
    home_score: number
    road_score: number
    is_finalized: number
    updated_at: number
    _all: number
  }


  export type GamesAvgAggregateInputType = {
    id?: true
    year?: true
    week?: true
    home_team_id?: true
    road_team_id?: true
    winning_team_id?: true
    home_score?: true
    road_score?: true
  }

  export type GamesSumAggregateInputType = {
    id?: true
    year?: true
    week?: true
    home_team_id?: true
    road_team_id?: true
    winning_team_id?: true
    home_score?: true
    road_score?: true
  }

  export type GamesMinAggregateInputType = {
    id?: true
    year?: true
    week?: true
    home_team_id?: true
    road_team_id?: true
    stadium?: true
    time?: true
    winning_team_id?: true
    home_score?: true
    road_score?: true
    is_finalized?: true
    updated_at?: true
  }

  export type GamesMaxAggregateInputType = {
    id?: true
    year?: true
    week?: true
    home_team_id?: true
    road_team_id?: true
    stadium?: true
    time?: true
    winning_team_id?: true
    home_score?: true
    road_score?: true
    is_finalized?: true
    updated_at?: true
  }

  export type GamesCountAggregateInputType = {
    id?: true
    year?: true
    week?: true
    home_team_id?: true
    road_team_id?: true
    stadium?: true
    time?: true
    winning_team_id?: true
    home_score?: true
    road_score?: true
    is_finalized?: true
    updated_at?: true
    _all?: true
  }

  export type GamesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to aggregate.
     */
    where?: GamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GamesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GamesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GamesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GamesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GamesMaxAggregateInputType
  }

  export type GetGamesAggregateType<T extends GamesAggregateArgs> = {
        [P in keyof T & keyof AggregateGames]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGames[P]>
      : GetScalarType<T[P], AggregateGames[P]>
  }




  export type GamesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamesWhereInput
    orderBy?: GamesOrderByWithAggregationInput | GamesOrderByWithAggregationInput[]
    by: GamesScalarFieldEnum[] | GamesScalarFieldEnum
    having?: GamesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GamesCountAggregateInputType | true
    _avg?: GamesAvgAggregateInputType
    _sum?: GamesSumAggregateInputType
    _min?: GamesMinAggregateInputType
    _max?: GamesMaxAggregateInputType
  }

  export type GamesGroupByOutputType = {
    id: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date
    winning_team_id: number | null
    home_score: number | null
    road_score: number | null
    is_finalized: boolean
    updated_at: Date
    _count: GamesCountAggregateOutputType | null
    _avg: GamesAvgAggregateOutputType | null
    _sum: GamesSumAggregateOutputType | null
    _min: GamesMinAggregateOutputType | null
    _max: GamesMaxAggregateOutputType | null
  }

  type GetGamesGroupByPayload<T extends GamesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GamesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GamesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GamesGroupByOutputType[P]>
            : GetScalarType<T[P], GamesGroupByOutputType[P]>
        }
      >
    >


  export type GamesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    week?: boolean
    home_team_id?: boolean
    road_team_id?: boolean
    stadium?: boolean
    time?: boolean
    winning_team_id?: boolean
    home_score?: boolean
    road_score?: boolean
    is_finalized?: boolean
    updated_at?: boolean
    home_team?: boolean | TeamsDefaultArgs<ExtArgs>
    road_team?: boolean | TeamsDefaultArgs<ExtArgs>
    winning_team?: boolean | Games$winning_teamArgs<ExtArgs>
    picks?: boolean | Games$picksArgs<ExtArgs>
    _count?: boolean | GamesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["games"]>

  export type GamesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    week?: boolean
    home_team_id?: boolean
    road_team_id?: boolean
    stadium?: boolean
    time?: boolean
    winning_team_id?: boolean
    home_score?: boolean
    road_score?: boolean
    is_finalized?: boolean
    updated_at?: boolean
    home_team?: boolean | TeamsDefaultArgs<ExtArgs>
    road_team?: boolean | TeamsDefaultArgs<ExtArgs>
    winning_team?: boolean | Games$winning_teamArgs<ExtArgs>
  }, ExtArgs["result"]["games"]>

  export type GamesSelectScalar = {
    id?: boolean
    year?: boolean
    week?: boolean
    home_team_id?: boolean
    road_team_id?: boolean
    stadium?: boolean
    time?: boolean
    winning_team_id?: boolean
    home_score?: boolean
    road_score?: boolean
    is_finalized?: boolean
    updated_at?: boolean
  }

  export type GamesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_team?: boolean | TeamsDefaultArgs<ExtArgs>
    road_team?: boolean | TeamsDefaultArgs<ExtArgs>
    winning_team?: boolean | Games$winning_teamArgs<ExtArgs>
    picks?: boolean | Games$picksArgs<ExtArgs>
    _count?: boolean | GamesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GamesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_team?: boolean | TeamsDefaultArgs<ExtArgs>
    road_team?: boolean | TeamsDefaultArgs<ExtArgs>
    winning_team?: boolean | Games$winning_teamArgs<ExtArgs>
  }

  export type $GamesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Games"
    objects: {
      home_team: Prisma.$TeamsPayload<ExtArgs>
      road_team: Prisma.$TeamsPayload<ExtArgs>
      winning_team: Prisma.$TeamsPayload<ExtArgs> | null
      picks: Prisma.$PicksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: number
      week: number
      home_team_id: number
      road_team_id: number
      stadium: string
      time: Date
      winning_team_id: number | null
      home_score: number | null
      road_score: number | null
      is_finalized: boolean
      updated_at: Date
    }, ExtArgs["result"]["games"]>
    composites: {}
  }

  type GamesGetPayload<S extends boolean | null | undefined | GamesDefaultArgs> = $Result.GetResult<Prisma.$GamesPayload, S>

  type GamesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GamesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GamesCountAggregateInputType | true
    }

  export interface GamesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Games'], meta: { name: 'Games' } }
    /**
     * Find zero or one Games that matches the filter.
     * @param {GamesFindUniqueArgs} args - Arguments to find a Games
     * @example
     * // Get one Games
     * const games = await prisma.games.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GamesFindUniqueArgs>(args: SelectSubset<T, GamesFindUniqueArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Games that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GamesFindUniqueOrThrowArgs} args - Arguments to find a Games
     * @example
     * // Get one Games
     * const games = await prisma.games.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GamesFindUniqueOrThrowArgs>(args: SelectSubset<T, GamesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesFindFirstArgs} args - Arguments to find a Games
     * @example
     * // Get one Games
     * const games = await prisma.games.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GamesFindFirstArgs>(args?: SelectSubset<T, GamesFindFirstArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Games that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesFindFirstOrThrowArgs} args - Arguments to find a Games
     * @example
     * // Get one Games
     * const games = await prisma.games.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GamesFindFirstOrThrowArgs>(args?: SelectSubset<T, GamesFindFirstOrThrowArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.games.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.games.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gamesWithIdOnly = await prisma.games.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GamesFindManyArgs>(args?: SelectSubset<T, GamesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Games.
     * @param {GamesCreateArgs} args - Arguments to create a Games.
     * @example
     * // Create one Games
     * const Games = await prisma.games.create({
     *   data: {
     *     // ... data to create a Games
     *   }
     * })
     * 
     */
    create<T extends GamesCreateArgs>(args: SelectSubset<T, GamesCreateArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {GamesCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const games = await prisma.games.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GamesCreateManyArgs>(args?: SelectSubset<T, GamesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GamesCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const games = await prisma.games.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gamesWithIdOnly = await prisma.games.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GamesCreateManyAndReturnArgs>(args?: SelectSubset<T, GamesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Games.
     * @param {GamesDeleteArgs} args - Arguments to delete one Games.
     * @example
     * // Delete one Games
     * const Games = await prisma.games.delete({
     *   where: {
     *     // ... filter to delete one Games
     *   }
     * })
     * 
     */
    delete<T extends GamesDeleteArgs>(args: SelectSubset<T, GamesDeleteArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Games.
     * @param {GamesUpdateArgs} args - Arguments to update one Games.
     * @example
     * // Update one Games
     * const games = await prisma.games.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GamesUpdateArgs>(args: SelectSubset<T, GamesUpdateArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GamesDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.games.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GamesDeleteManyArgs>(args?: SelectSubset<T, GamesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const games = await prisma.games.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GamesUpdateManyArgs>(args: SelectSubset<T, GamesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Games.
     * @param {GamesUpsertArgs} args - Arguments to update or create a Games.
     * @example
     * // Update or create a Games
     * const games = await prisma.games.upsert({
     *   create: {
     *     // ... data to create a Games
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Games we want to update
     *   }
     * })
     */
    upsert<T extends GamesUpsertArgs>(args: SelectSubset<T, GamesUpsertArgs<ExtArgs>>): Prisma__GamesClient<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.games.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GamesCountArgs>(
      args?: Subset<T, GamesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GamesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GamesAggregateArgs>(args: Subset<T, GamesAggregateArgs>): Prisma.PrismaPromise<GetGamesAggregateType<T>>

    /**
     * Group by Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GamesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GamesGroupByArgs['orderBy'] }
        : { orderBy?: GamesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GamesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGamesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Games model
   */
  readonly fields: GamesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Games.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GamesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    home_team<T extends TeamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamsDefaultArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    road_team<T extends TeamsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamsDefaultArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    winning_team<T extends Games$winning_teamArgs<ExtArgs> = {}>(args?: Subset<T, Games$winning_teamArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    picks<T extends Games$picksArgs<ExtArgs> = {}>(args?: Subset<T, Games$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Games model
   */ 
  interface GamesFieldRefs {
    readonly id: FieldRef<"Games", 'Int'>
    readonly year: FieldRef<"Games", 'Int'>
    readonly week: FieldRef<"Games", 'Int'>
    readonly home_team_id: FieldRef<"Games", 'Int'>
    readonly road_team_id: FieldRef<"Games", 'Int'>
    readonly stadium: FieldRef<"Games", 'String'>
    readonly time: FieldRef<"Games", 'DateTime'>
    readonly winning_team_id: FieldRef<"Games", 'Int'>
    readonly home_score: FieldRef<"Games", 'Int'>
    readonly road_score: FieldRef<"Games", 'Int'>
    readonly is_finalized: FieldRef<"Games", 'Boolean'>
    readonly updated_at: FieldRef<"Games", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Games findUnique
   */
  export type GamesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where: GamesWhereUniqueInput
  }

  /**
   * Games findUniqueOrThrow
   */
  export type GamesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where: GamesWhereUniqueInput
  }

  /**
   * Games findFirst
   */
  export type GamesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Games findFirstOrThrow
   */
  export type GamesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Games findMany
   */
  export type GamesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Games create
   */
  export type GamesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * The data needed to create a Games.
     */
    data: XOR<GamesCreateInput, GamesUncheckedCreateInput>
  }

  /**
   * Games createMany
   */
  export type GamesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GamesCreateManyInput | GamesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Games createManyAndReturn
   */
  export type GamesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GamesCreateManyInput | GamesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Games update
   */
  export type GamesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * The data needed to update a Games.
     */
    data: XOR<GamesUpdateInput, GamesUncheckedUpdateInput>
    /**
     * Choose, which Games to update.
     */
    where: GamesWhereUniqueInput
  }

  /**
   * Games updateMany
   */
  export type GamesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GamesUpdateManyMutationInput, GamesUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GamesWhereInput
  }

  /**
   * Games upsert
   */
  export type GamesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * The filter to search for the Games to update in case it exists.
     */
    where: GamesWhereUniqueInput
    /**
     * In case the Games found by the `where` argument doesn't exist, create a new Games with this data.
     */
    create: XOR<GamesCreateInput, GamesUncheckedCreateInput>
    /**
     * In case the Games was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GamesUpdateInput, GamesUncheckedUpdateInput>
  }

  /**
   * Games delete
   */
  export type GamesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    /**
     * Filter which Games to delete.
     */
    where: GamesWhereUniqueInput
  }

  /**
   * Games deleteMany
   */
  export type GamesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GamesWhereInput
  }

  /**
   * Games.winning_team
   */
  export type Games$winning_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    where?: TeamsWhereInput
  }

  /**
   * Games.picks
   */
  export type Games$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    where?: PicksWhereInput
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    cursor?: PicksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Games without action
   */
  export type GamesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
  }


  /**
   * Model Teams
   */

  export type AggregateTeams = {
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  export type TeamsAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamsSumAggregateOutputType = {
    id: number | null
  }

  export type TeamsMinAggregateOutputType = {
    id: number | null
    name: string | null
    geo: string | null
    stadium: string | null
    division: string | null
    conference: string | null
    logo_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    geo: string | null
    stadium: string | null
    division: string | null
    conference: string | null
    logo_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TeamsCountAggregateOutputType = {
    id: number
    name: number
    geo: number
    stadium: number
    division: number
    conference: number
    logo_url: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TeamsAvgAggregateInputType = {
    id?: true
  }

  export type TeamsSumAggregateInputType = {
    id?: true
  }

  export type TeamsMinAggregateInputType = {
    id?: true
    name?: true
    geo?: true
    stadium?: true
    division?: true
    conference?: true
    logo_url?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamsMaxAggregateInputType = {
    id?: true
    name?: true
    geo?: true
    stadium?: true
    division?: true
    conference?: true
    logo_url?: true
    created_at?: true
    updated_at?: true
  }

  export type TeamsCountAggregateInputType = {
    id?: true
    name?: true
    geo?: true
    stadium?: true
    division?: true
    conference?: true
    logo_url?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TeamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to aggregate.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamsMaxAggregateInputType
  }

  export type GetTeamsAggregateType<T extends TeamsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeams[P]>
      : GetScalarType<T[P], AggregateTeams[P]>
  }




  export type TeamsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamsWhereInput
    orderBy?: TeamsOrderByWithAggregationInput | TeamsOrderByWithAggregationInput[]
    by: TeamsScalarFieldEnum[] | TeamsScalarFieldEnum
    having?: TeamsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamsCountAggregateInputType | true
    _avg?: TeamsAvgAggregateInputType
    _sum?: TeamsSumAggregateInputType
    _min?: TeamsMinAggregateInputType
    _max?: TeamsMaxAggregateInputType
  }

  export type TeamsGroupByOutputType = {
    id: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url: string | null
    created_at: Date
    updated_at: Date
    _count: TeamsCountAggregateOutputType | null
    _avg: TeamsAvgAggregateOutputType | null
    _sum: TeamsSumAggregateOutputType | null
    _min: TeamsMinAggregateOutputType | null
    _max: TeamsMaxAggregateOutputType | null
  }

  type GetTeamsGroupByPayload<T extends TeamsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamsGroupByOutputType[P]>
        }
      >
    >


  export type TeamsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    geo?: boolean
    stadium?: boolean
    division?: boolean
    conference?: boolean
    logo_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    home_games?: boolean | Teams$home_gamesArgs<ExtArgs>
    road_games?: boolean | Teams$road_gamesArgs<ExtArgs>
    winning_games?: boolean | Teams$winning_gamesArgs<ExtArgs>
    picks?: boolean | Teams$picksArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teams"]>

  export type TeamsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    geo?: boolean
    stadium?: boolean
    division?: boolean
    conference?: boolean
    logo_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["teams"]>

  export type TeamsSelectScalar = {
    id?: boolean
    name?: boolean
    geo?: boolean
    stadium?: boolean
    division?: boolean
    conference?: boolean
    logo_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TeamsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_games?: boolean | Teams$home_gamesArgs<ExtArgs>
    road_games?: boolean | Teams$road_gamesArgs<ExtArgs>
    winning_games?: boolean | Teams$winning_gamesArgs<ExtArgs>
    picks?: boolean | Teams$picksArgs<ExtArgs>
    _count?: boolean | TeamsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teams"
    objects: {
      home_games: Prisma.$GamesPayload<ExtArgs>[]
      road_games: Prisma.$GamesPayload<ExtArgs>[]
      winning_games: Prisma.$GamesPayload<ExtArgs>[]
      picks: Prisma.$PicksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      geo: string
      stadium: string
      division: string
      conference: string
      logo_url: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["teams"]>
    composites: {}
  }

  type TeamsGetPayload<S extends boolean | null | undefined | TeamsDefaultArgs> = $Result.GetResult<Prisma.$TeamsPayload, S>

  type TeamsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamsCountAggregateInputType | true
    }

  export interface TeamsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teams'], meta: { name: 'Teams' } }
    /**
     * Find zero or one Teams that matches the filter.
     * @param {TeamsFindUniqueArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamsFindUniqueArgs>(args: SelectSubset<T, TeamsFindUniqueArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Teams that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamsFindUniqueOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamsFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamsFindFirstArgs>(args?: SelectSubset<T, TeamsFindFirstArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Teams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindFirstOrThrowArgs} args - Arguments to find a Teams
     * @example
     * // Get one Teams
     * const teams = await prisma.teams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamsFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.teams.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.teams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamsWithIdOnly = await prisma.teams.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamsFindManyArgs>(args?: SelectSubset<T, TeamsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Teams.
     * @param {TeamsCreateArgs} args - Arguments to create a Teams.
     * @example
     * // Create one Teams
     * const Teams = await prisma.teams.create({
     *   data: {
     *     // ... data to create a Teams
     *   }
     * })
     * 
     */
    create<T extends TeamsCreateArgs>(args: SelectSubset<T, TeamsCreateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamsCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamsCreateManyArgs>(args?: SelectSubset<T, TeamsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamsCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const teams = await prisma.teams.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamsWithIdOnly = await prisma.teams.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamsCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Teams.
     * @param {TeamsDeleteArgs} args - Arguments to delete one Teams.
     * @example
     * // Delete one Teams
     * const Teams = await prisma.teams.delete({
     *   where: {
     *     // ... filter to delete one Teams
     *   }
     * })
     * 
     */
    delete<T extends TeamsDeleteArgs>(args: SelectSubset<T, TeamsDeleteArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Teams.
     * @param {TeamsUpdateArgs} args - Arguments to update one Teams.
     * @example
     * // Update one Teams
     * const teams = await prisma.teams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamsUpdateArgs>(args: SelectSubset<T, TeamsUpdateArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamsDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.teams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamsDeleteManyArgs>(args?: SelectSubset<T, TeamsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const teams = await prisma.teams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamsUpdateManyArgs>(args: SelectSubset<T, TeamsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teams.
     * @param {TeamsUpsertArgs} args - Arguments to update or create a Teams.
     * @example
     * // Update or create a Teams
     * const teams = await prisma.teams.upsert({
     *   create: {
     *     // ... data to create a Teams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teams we want to update
     *   }
     * })
     */
    upsert<T extends TeamsUpsertArgs>(args: SelectSubset<T, TeamsUpsertArgs<ExtArgs>>): Prisma__TeamsClient<$Result.GetResult<Prisma.$TeamsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.teams.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamsCountArgs>(
      args?: Subset<T, TeamsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamsAggregateArgs>(args: Subset<T, TeamsAggregateArgs>): Prisma.PrismaPromise<GetTeamsAggregateType<T>>

    /**
     * Group by Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamsGroupByArgs['orderBy'] }
        : { orderBy?: TeamsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teams model
   */
  readonly fields: TeamsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    home_games<T extends Teams$home_gamesArgs<ExtArgs> = {}>(args?: Subset<T, Teams$home_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findMany"> | Null>
    road_games<T extends Teams$road_gamesArgs<ExtArgs> = {}>(args?: Subset<T, Teams$road_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findMany"> | Null>
    winning_games<T extends Teams$winning_gamesArgs<ExtArgs> = {}>(args?: Subset<T, Teams$winning_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamesPayload<ExtArgs>, T, "findMany"> | Null>
    picks<T extends Teams$picksArgs<ExtArgs> = {}>(args?: Subset<T, Teams$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PicksPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teams model
   */ 
  interface TeamsFieldRefs {
    readonly id: FieldRef<"Teams", 'Int'>
    readonly name: FieldRef<"Teams", 'String'>
    readonly geo: FieldRef<"Teams", 'String'>
    readonly stadium: FieldRef<"Teams", 'String'>
    readonly division: FieldRef<"Teams", 'String'>
    readonly conference: FieldRef<"Teams", 'String'>
    readonly logo_url: FieldRef<"Teams", 'String'>
    readonly created_at: FieldRef<"Teams", 'DateTime'>
    readonly updated_at: FieldRef<"Teams", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Teams findUnique
   */
  export type TeamsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findUniqueOrThrow
   */
  export type TeamsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams findFirst
   */
  export type TeamsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findFirstOrThrow
   */
  export type TeamsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams findMany
   */
  export type TeamsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamsOrderByWithRelationInput | TeamsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamsScalarFieldEnum | TeamsScalarFieldEnum[]
  }

  /**
   * Teams create
   */
  export type TeamsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to create a Teams.
     */
    data: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
  }

  /**
   * Teams createMany
   */
  export type TeamsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamsCreateManyInput | TeamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teams createManyAndReturn
   */
  export type TeamsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamsCreateManyInput | TeamsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teams update
   */
  export type TeamsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The data needed to update a Teams.
     */
    data: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
    /**
     * Choose, which Teams to update.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams updateMany
   */
  export type TeamsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamsUpdateManyMutationInput, TeamsUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamsWhereInput
  }

  /**
   * Teams upsert
   */
  export type TeamsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * The filter to search for the Teams to update in case it exists.
     */
    where: TeamsWhereUniqueInput
    /**
     * In case the Teams found by the `where` argument doesn't exist, create a new Teams with this data.
     */
    create: XOR<TeamsCreateInput, TeamsUncheckedCreateInput>
    /**
     * In case the Teams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamsUpdateInput, TeamsUncheckedUpdateInput>
  }

  /**
   * Teams delete
   */
  export type TeamsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
    /**
     * Filter which Teams to delete.
     */
    where: TeamsWhereUniqueInput
  }

  /**
   * Teams deleteMany
   */
  export type TeamsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamsWhereInput
  }

  /**
   * Teams.home_games
   */
  export type Teams$home_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    where?: GamesWhereInput
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    cursor?: GamesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Teams.road_games
   */
  export type Teams$road_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    where?: GamesWhereInput
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    cursor?: GamesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Teams.winning_games
   */
  export type Teams$winning_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Games
     */
    select?: GamesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamesInclude<ExtArgs> | null
    where?: GamesWhereInput
    orderBy?: GamesOrderByWithRelationInput | GamesOrderByWithRelationInput[]
    cursor?: GamesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GamesScalarFieldEnum | GamesScalarFieldEnum[]
  }

  /**
   * Teams.picks
   */
  export type Teams$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Picks
     */
    select?: PicksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PicksInclude<ExtArgs> | null
    where?: PicksWhereInput
    orderBy?: PicksOrderByWithRelationInput | PicksOrderByWithRelationInput[]
    cursor?: PicksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PicksScalarFieldEnum | PicksScalarFieldEnum[]
  }

  /**
   * Teams without action
   */
  export type TeamsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teams
     */
    select?: TeamsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamsInclude<ExtArgs> | null
  }


  /**
   * Model WeeklyScores
   */

  export type AggregateWeeklyScores = {
    _count: WeeklyScoresCountAggregateOutputType | null
    _avg: WeeklyScoresAvgAggregateOutputType | null
    _sum: WeeklyScoresSumAggregateOutputType | null
    _min: WeeklyScoresMinAggregateOutputType | null
    _max: WeeklyScoresMaxAggregateOutputType | null
  }

  export type WeeklyScoresAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
    week: number | null
    correct_picks: number | null
    total_picks: number | null
  }

  export type WeeklyScoresSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
    week: number | null
    correct_picks: number | null
    total_picks: number | null
  }

  export type WeeklyScoresMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
    week: number | null
    correct_picks: number | null
    total_picks: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WeeklyScoresMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
    week: number | null
    correct_picks: number | null
    total_picks: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WeeklyScoresCountAggregateOutputType = {
    id: number
    user_id: number
    year: number
    week: number
    correct_picks: number
    total_picks: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type WeeklyScoresAvgAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
    week?: true
    correct_picks?: true
    total_picks?: true
  }

  export type WeeklyScoresSumAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
    week?: true
    correct_picks?: true
    total_picks?: true
  }

  export type WeeklyScoresMinAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
    week?: true
    correct_picks?: true
    total_picks?: true
    created_at?: true
    updated_at?: true
  }

  export type WeeklyScoresMaxAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
    week?: true
    correct_picks?: true
    total_picks?: true
    created_at?: true
    updated_at?: true
  }

  export type WeeklyScoresCountAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
    week?: true
    correct_picks?: true
    total_picks?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type WeeklyScoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyScores to aggregate.
     */
    where?: WeeklyScoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyScores to fetch.
     */
    orderBy?: WeeklyScoresOrderByWithRelationInput | WeeklyScoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeeklyScoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklyScores
    **/
    _count?: true | WeeklyScoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeeklyScoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeeklyScoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyScoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyScoresMaxAggregateInputType
  }

  export type GetWeeklyScoresAggregateType<T extends WeeklyScoresAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklyScores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklyScores[P]>
      : GetScalarType<T[P], AggregateWeeklyScores[P]>
  }




  export type WeeklyScoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScoresWhereInput
    orderBy?: WeeklyScoresOrderByWithAggregationInput | WeeklyScoresOrderByWithAggregationInput[]
    by: WeeklyScoresScalarFieldEnum[] | WeeklyScoresScalarFieldEnum
    having?: WeeklyScoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyScoresCountAggregateInputType | true
    _avg?: WeeklyScoresAvgAggregateInputType
    _sum?: WeeklyScoresSumAggregateInputType
    _min?: WeeklyScoresMinAggregateInputType
    _max?: WeeklyScoresMaxAggregateInputType
  }

  export type WeeklyScoresGroupByOutputType = {
    id: number
    user_id: number
    year: number
    week: number
    correct_picks: number
    total_picks: number
    created_at: Date
    updated_at: Date
    _count: WeeklyScoresCountAggregateOutputType | null
    _avg: WeeklyScoresAvgAggregateOutputType | null
    _sum: WeeklyScoresSumAggregateOutputType | null
    _min: WeeklyScoresMinAggregateOutputType | null
    _max: WeeklyScoresMaxAggregateOutputType | null
  }

  type GetWeeklyScoresGroupByPayload<T extends WeeklyScoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeeklyScoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyScoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyScoresGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyScoresGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyScoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    year?: boolean
    week?: boolean
    correct_picks?: boolean
    total_picks?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyScores"]>

  export type WeeklyScoresSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    year?: boolean
    week?: boolean
    correct_picks?: boolean
    total_picks?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyScores"]>

  export type WeeklyScoresSelectScalar = {
    id?: boolean
    user_id?: boolean
    year?: boolean
    week?: boolean
    correct_picks?: boolean
    total_picks?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type WeeklyScoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type WeeklyScoresIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $WeeklyScoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeeklyScores"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      year: number
      week: number
      correct_picks: number
      total_picks: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["weeklyScores"]>
    composites: {}
  }

  type WeeklyScoresGetPayload<S extends boolean | null | undefined | WeeklyScoresDefaultArgs> = $Result.GetResult<Prisma.$WeeklyScoresPayload, S>

  type WeeklyScoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeeklyScoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeeklyScoresCountAggregateInputType | true
    }

  export interface WeeklyScoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeeklyScores'], meta: { name: 'WeeklyScores' } }
    /**
     * Find zero or one WeeklyScores that matches the filter.
     * @param {WeeklyScoresFindUniqueArgs} args - Arguments to find a WeeklyScores
     * @example
     * // Get one WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeeklyScoresFindUniqueArgs>(args: SelectSubset<T, WeeklyScoresFindUniqueArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WeeklyScores that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeeklyScoresFindUniqueOrThrowArgs} args - Arguments to find a WeeklyScores
     * @example
     * // Get one WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeeklyScoresFindUniqueOrThrowArgs>(args: SelectSubset<T, WeeklyScoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WeeklyScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresFindFirstArgs} args - Arguments to find a WeeklyScores
     * @example
     * // Get one WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeeklyScoresFindFirstArgs>(args?: SelectSubset<T, WeeklyScoresFindFirstArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WeeklyScores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresFindFirstOrThrowArgs} args - Arguments to find a WeeklyScores
     * @example
     * // Get one WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeeklyScoresFindFirstOrThrowArgs>(args?: SelectSubset<T, WeeklyScoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WeeklyScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findMany()
     * 
     * // Get first 10 WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyScoresWithIdOnly = await prisma.weeklyScores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeeklyScoresFindManyArgs>(args?: SelectSubset<T, WeeklyScoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WeeklyScores.
     * @param {WeeklyScoresCreateArgs} args - Arguments to create a WeeklyScores.
     * @example
     * // Create one WeeklyScores
     * const WeeklyScores = await prisma.weeklyScores.create({
     *   data: {
     *     // ... data to create a WeeklyScores
     *   }
     * })
     * 
     */
    create<T extends WeeklyScoresCreateArgs>(args: SelectSubset<T, WeeklyScoresCreateArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WeeklyScores.
     * @param {WeeklyScoresCreateManyArgs} args - Arguments to create many WeeklyScores.
     * @example
     * // Create many WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeeklyScoresCreateManyArgs>(args?: SelectSubset<T, WeeklyScoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeeklyScores and returns the data saved in the database.
     * @param {WeeklyScoresCreateManyAndReturnArgs} args - Arguments to create many WeeklyScores.
     * @example
     * // Create many WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeeklyScores and only return the `id`
     * const weeklyScoresWithIdOnly = await prisma.weeklyScores.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeeklyScoresCreateManyAndReturnArgs>(args?: SelectSubset<T, WeeklyScoresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WeeklyScores.
     * @param {WeeklyScoresDeleteArgs} args - Arguments to delete one WeeklyScores.
     * @example
     * // Delete one WeeklyScores
     * const WeeklyScores = await prisma.weeklyScores.delete({
     *   where: {
     *     // ... filter to delete one WeeklyScores
     *   }
     * })
     * 
     */
    delete<T extends WeeklyScoresDeleteArgs>(args: SelectSubset<T, WeeklyScoresDeleteArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WeeklyScores.
     * @param {WeeklyScoresUpdateArgs} args - Arguments to update one WeeklyScores.
     * @example
     * // Update one WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeeklyScoresUpdateArgs>(args: SelectSubset<T, WeeklyScoresUpdateArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WeeklyScores.
     * @param {WeeklyScoresDeleteManyArgs} args - Arguments to filter WeeklyScores to delete.
     * @example
     * // Delete a few WeeklyScores
     * const { count } = await prisma.weeklyScores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeeklyScoresDeleteManyArgs>(args?: SelectSubset<T, WeeklyScoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklyScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeeklyScoresUpdateManyArgs>(args: SelectSubset<T, WeeklyScoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeeklyScores.
     * @param {WeeklyScoresUpsertArgs} args - Arguments to update or create a WeeklyScores.
     * @example
     * // Update or create a WeeklyScores
     * const weeklyScores = await prisma.weeklyScores.upsert({
     *   create: {
     *     // ... data to create a WeeklyScores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklyScores we want to update
     *   }
     * })
     */
    upsert<T extends WeeklyScoresUpsertArgs>(args: SelectSubset<T, WeeklyScoresUpsertArgs<ExtArgs>>): Prisma__WeeklyScoresClient<$Result.GetResult<Prisma.$WeeklyScoresPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WeeklyScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresCountArgs} args - Arguments to filter WeeklyScores to count.
     * @example
     * // Count the number of WeeklyScores
     * const count = await prisma.weeklyScores.count({
     *   where: {
     *     // ... the filter for the WeeklyScores we want to count
     *   }
     * })
    **/
    count<T extends WeeklyScoresCountArgs>(
      args?: Subset<T, WeeklyScoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyScoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklyScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyScoresAggregateArgs>(args: Subset<T, WeeklyScoresAggregateArgs>): Prisma.PrismaPromise<GetWeeklyScoresAggregateType<T>>

    /**
     * Group by WeeklyScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyScoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyScoresGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyScoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyScoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyScoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeeklyScores model
   */
  readonly fields: WeeklyScoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklyScores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeeklyScoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeeklyScores model
   */ 
  interface WeeklyScoresFieldRefs {
    readonly id: FieldRef<"WeeklyScores", 'Int'>
    readonly user_id: FieldRef<"WeeklyScores", 'Int'>
    readonly year: FieldRef<"WeeklyScores", 'Int'>
    readonly week: FieldRef<"WeeklyScores", 'Int'>
    readonly correct_picks: FieldRef<"WeeklyScores", 'Int'>
    readonly total_picks: FieldRef<"WeeklyScores", 'Int'>
    readonly created_at: FieldRef<"WeeklyScores", 'DateTime'>
    readonly updated_at: FieldRef<"WeeklyScores", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeeklyScores findUnique
   */
  export type WeeklyScoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyScores to fetch.
     */
    where: WeeklyScoresWhereUniqueInput
  }

  /**
   * WeeklyScores findUniqueOrThrow
   */
  export type WeeklyScoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyScores to fetch.
     */
    where: WeeklyScoresWhereUniqueInput
  }

  /**
   * WeeklyScores findFirst
   */
  export type WeeklyScoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyScores to fetch.
     */
    where?: WeeklyScoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyScores to fetch.
     */
    orderBy?: WeeklyScoresOrderByWithRelationInput | WeeklyScoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyScores.
     */
    cursor?: WeeklyScoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyScores.
     */
    distinct?: WeeklyScoresScalarFieldEnum | WeeklyScoresScalarFieldEnum[]
  }

  /**
   * WeeklyScores findFirstOrThrow
   */
  export type WeeklyScoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyScores to fetch.
     */
    where?: WeeklyScoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyScores to fetch.
     */
    orderBy?: WeeklyScoresOrderByWithRelationInput | WeeklyScoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyScores.
     */
    cursor?: WeeklyScoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyScores.
     */
    distinct?: WeeklyScoresScalarFieldEnum | WeeklyScoresScalarFieldEnum[]
  }

  /**
   * WeeklyScores findMany
   */
  export type WeeklyScoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyScores to fetch.
     */
    where?: WeeklyScoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyScores to fetch.
     */
    orderBy?: WeeklyScoresOrderByWithRelationInput | WeeklyScoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklyScores.
     */
    cursor?: WeeklyScoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyScores.
     */
    skip?: number
    distinct?: WeeklyScoresScalarFieldEnum | WeeklyScoresScalarFieldEnum[]
  }

  /**
   * WeeklyScores create
   */
  export type WeeklyScoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * The data needed to create a WeeklyScores.
     */
    data: XOR<WeeklyScoresCreateInput, WeeklyScoresUncheckedCreateInput>
  }

  /**
   * WeeklyScores createMany
   */
  export type WeeklyScoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeeklyScores.
     */
    data: WeeklyScoresCreateManyInput | WeeklyScoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeeklyScores createManyAndReturn
   */
  export type WeeklyScoresCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeeklyScores.
     */
    data: WeeklyScoresCreateManyInput | WeeklyScoresCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklyScores update
   */
  export type WeeklyScoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * The data needed to update a WeeklyScores.
     */
    data: XOR<WeeklyScoresUpdateInput, WeeklyScoresUncheckedUpdateInput>
    /**
     * Choose, which WeeklyScores to update.
     */
    where: WeeklyScoresWhereUniqueInput
  }

  /**
   * WeeklyScores updateMany
   */
  export type WeeklyScoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeeklyScores.
     */
    data: XOR<WeeklyScoresUpdateManyMutationInput, WeeklyScoresUncheckedUpdateManyInput>
    /**
     * Filter which WeeklyScores to update
     */
    where?: WeeklyScoresWhereInput
  }

  /**
   * WeeklyScores upsert
   */
  export type WeeklyScoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * The filter to search for the WeeklyScores to update in case it exists.
     */
    where: WeeklyScoresWhereUniqueInput
    /**
     * In case the WeeklyScores found by the `where` argument doesn't exist, create a new WeeklyScores with this data.
     */
    create: XOR<WeeklyScoresCreateInput, WeeklyScoresUncheckedCreateInput>
    /**
     * In case the WeeklyScores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeeklyScoresUpdateInput, WeeklyScoresUncheckedUpdateInput>
  }

  /**
   * WeeklyScores delete
   */
  export type WeeklyScoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
    /**
     * Filter which WeeklyScores to delete.
     */
    where: WeeklyScoresWhereUniqueInput
  }

  /**
   * WeeklyScores deleteMany
   */
  export type WeeklyScoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyScores to delete
     */
    where?: WeeklyScoresWhereInput
  }

  /**
   * WeeklyScores without action
   */
  export type WeeklyScoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyScores
     */
    select?: WeeklyScoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScoresInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const LeaguesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_by: 'created_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LeaguesScalarFieldEnum = (typeof LeaguesScalarFieldEnum)[keyof typeof LeaguesScalarFieldEnum]


  export const UserLeaguesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    league_id: 'league_id',
    joined_at: 'joined_at'
  };

  export type UserLeaguesScalarFieldEnum = (typeof UserLeaguesScalarFieldEnum)[keyof typeof UserLeaguesScalarFieldEnum]


  export const PicksScalarFieldEnum: {
    id: 'id',
    team_id: 'team_id',
    user_id: 'user_id',
    game_id: 'game_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PicksScalarFieldEnum = (typeof PicksScalarFieldEnum)[keyof typeof PicksScalarFieldEnum]


  export const GamesScalarFieldEnum: {
    id: 'id',
    year: 'year',
    week: 'week',
    home_team_id: 'home_team_id',
    road_team_id: 'road_team_id',
    stadium: 'stadium',
    time: 'time',
    winning_team_id: 'winning_team_id',
    home_score: 'home_score',
    road_score: 'road_score',
    is_finalized: 'is_finalized',
    updated_at: 'updated_at'
  };

  export type GamesScalarFieldEnum = (typeof GamesScalarFieldEnum)[keyof typeof GamesScalarFieldEnum]


  export const TeamsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    geo: 'geo',
    stadium: 'stadium',
    division: 'division',
    conference: 'conference',
    logo_url: 'logo_url',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


  export const WeeklyScoresScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    year: 'year',
    week: 'week',
    correct_picks: 'correct_picks',
    total_picks: 'total_picks',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type WeeklyScoresScalarFieldEnum = (typeof WeeklyScoresScalarFieldEnum)[keyof typeof WeeklyScoresScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    name?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    picks?: PicksListRelationFilter
    userLeagues?: UserLeaguesListRelationFilter
    weeklyScores?: WeeklyScoresListRelationFilter
    createdLeagues?: LeaguesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    picks?: PicksOrderByRelationAggregateInput
    userLeagues?: UserLeaguesOrderByRelationAggregateInput
    weeklyScores?: WeeklyScoresOrderByRelationAggregateInput
    createdLeagues?: LeaguesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    picks?: PicksListRelationFilter
    userLeagues?: UserLeaguesListRelationFilter
    weeklyScores?: WeeklyScoresListRelationFilter
    createdLeagues?: LeaguesListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    name?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type LeaguesWhereInput = {
    AND?: LeaguesWhereInput | LeaguesWhereInput[]
    OR?: LeaguesWhereInput[]
    NOT?: LeaguesWhereInput | LeaguesWhereInput[]
    id?: IntFilter<"Leagues"> | number
    name?: StringFilter<"Leagues"> | string
    description?: StringNullableFilter<"Leagues"> | string | null
    created_by?: IntFilter<"Leagues"> | number
    created_at?: DateTimeFilter<"Leagues"> | Date | string
    updated_at?: DateTimeFilter<"Leagues"> | Date | string
    userLeagues?: UserLeaguesListRelationFilter
    createdByUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type LeaguesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userLeagues?: UserLeaguesOrderByRelationAggregateInput
    createdByUser?: UsersOrderByWithRelationInput
  }

  export type LeaguesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaguesWhereInput | LeaguesWhereInput[]
    OR?: LeaguesWhereInput[]
    NOT?: LeaguesWhereInput | LeaguesWhereInput[]
    name?: StringFilter<"Leagues"> | string
    description?: StringNullableFilter<"Leagues"> | string | null
    created_by?: IntFilter<"Leagues"> | number
    created_at?: DateTimeFilter<"Leagues"> | Date | string
    updated_at?: DateTimeFilter<"Leagues"> | Date | string
    userLeagues?: UserLeaguesListRelationFilter
    createdByUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type LeaguesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LeaguesCountOrderByAggregateInput
    _avg?: LeaguesAvgOrderByAggregateInput
    _max?: LeaguesMaxOrderByAggregateInput
    _min?: LeaguesMinOrderByAggregateInput
    _sum?: LeaguesSumOrderByAggregateInput
  }

  export type LeaguesScalarWhereWithAggregatesInput = {
    AND?: LeaguesScalarWhereWithAggregatesInput | LeaguesScalarWhereWithAggregatesInput[]
    OR?: LeaguesScalarWhereWithAggregatesInput[]
    NOT?: LeaguesScalarWhereWithAggregatesInput | LeaguesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Leagues"> | number
    name?: StringWithAggregatesFilter<"Leagues"> | string
    description?: StringNullableWithAggregatesFilter<"Leagues"> | string | null
    created_by?: IntWithAggregatesFilter<"Leagues"> | number
    created_at?: DateTimeWithAggregatesFilter<"Leagues"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Leagues"> | Date | string
  }

  export type UserLeaguesWhereInput = {
    AND?: UserLeaguesWhereInput | UserLeaguesWhereInput[]
    OR?: UserLeaguesWhereInput[]
    NOT?: UserLeaguesWhereInput | UserLeaguesWhereInput[]
    id?: IntFilter<"UserLeagues"> | number
    user_id?: IntFilter<"UserLeagues"> | number
    league_id?: IntFilter<"UserLeagues"> | number
    joined_at?: DateTimeFilter<"UserLeagues"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    league?: XOR<LeaguesRelationFilter, LeaguesWhereInput>
  }

  export type UserLeaguesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
    joined_at?: SortOrder
    user?: UsersOrderByWithRelationInput
    league?: LeaguesOrderByWithRelationInput
  }

  export type UserLeaguesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_league_id?: UserLeaguesUser_idLeague_idCompoundUniqueInput
    AND?: UserLeaguesWhereInput | UserLeaguesWhereInput[]
    OR?: UserLeaguesWhereInput[]
    NOT?: UserLeaguesWhereInput | UserLeaguesWhereInput[]
    user_id?: IntFilter<"UserLeagues"> | number
    league_id?: IntFilter<"UserLeagues"> | number
    joined_at?: DateTimeFilter<"UserLeagues"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    league?: XOR<LeaguesRelationFilter, LeaguesWhereInput>
  }, "id" | "user_id_league_id">

  export type UserLeaguesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
    joined_at?: SortOrder
    _count?: UserLeaguesCountOrderByAggregateInput
    _avg?: UserLeaguesAvgOrderByAggregateInput
    _max?: UserLeaguesMaxOrderByAggregateInput
    _min?: UserLeaguesMinOrderByAggregateInput
    _sum?: UserLeaguesSumOrderByAggregateInput
  }

  export type UserLeaguesScalarWhereWithAggregatesInput = {
    AND?: UserLeaguesScalarWhereWithAggregatesInput | UserLeaguesScalarWhereWithAggregatesInput[]
    OR?: UserLeaguesScalarWhereWithAggregatesInput[]
    NOT?: UserLeaguesScalarWhereWithAggregatesInput | UserLeaguesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserLeagues"> | number
    user_id?: IntWithAggregatesFilter<"UserLeagues"> | number
    league_id?: IntWithAggregatesFilter<"UserLeagues"> | number
    joined_at?: DateTimeWithAggregatesFilter<"UserLeagues"> | Date | string
  }

  export type PicksWhereInput = {
    AND?: PicksWhereInput | PicksWhereInput[]
    OR?: PicksWhereInput[]
    NOT?: PicksWhereInput | PicksWhereInput[]
    id?: IntFilter<"Picks"> | number
    team_id?: IntFilter<"Picks"> | number
    user_id?: IntFilter<"Picks"> | number
    game_id?: IntFilter<"Picks"> | number
    created_at?: DateTimeFilter<"Picks"> | Date | string
    updated_at?: DateTimeFilter<"Picks"> | Date | string
    team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    game?: XOR<GamesRelationFilter, GamesWhereInput>
  }

  export type PicksOrderByWithRelationInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    team?: TeamsOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
    game?: GamesOrderByWithRelationInput
  }

  export type PicksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_game_id?: PicksUser_idGame_idCompoundUniqueInput
    AND?: PicksWhereInput | PicksWhereInput[]
    OR?: PicksWhereInput[]
    NOT?: PicksWhereInput | PicksWhereInput[]
    team_id?: IntFilter<"Picks"> | number
    user_id?: IntFilter<"Picks"> | number
    game_id?: IntFilter<"Picks"> | number
    created_at?: DateTimeFilter<"Picks"> | Date | string
    updated_at?: DateTimeFilter<"Picks"> | Date | string
    team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    game?: XOR<GamesRelationFilter, GamesWhereInput>
  }, "id" | "user_id_game_id">

  export type PicksOrderByWithAggregationInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PicksCountOrderByAggregateInput
    _avg?: PicksAvgOrderByAggregateInput
    _max?: PicksMaxOrderByAggregateInput
    _min?: PicksMinOrderByAggregateInput
    _sum?: PicksSumOrderByAggregateInput
  }

  export type PicksScalarWhereWithAggregatesInput = {
    AND?: PicksScalarWhereWithAggregatesInput | PicksScalarWhereWithAggregatesInput[]
    OR?: PicksScalarWhereWithAggregatesInput[]
    NOT?: PicksScalarWhereWithAggregatesInput | PicksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Picks"> | number
    team_id?: IntWithAggregatesFilter<"Picks"> | number
    user_id?: IntWithAggregatesFilter<"Picks"> | number
    game_id?: IntWithAggregatesFilter<"Picks"> | number
    created_at?: DateTimeWithAggregatesFilter<"Picks"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Picks"> | Date | string
  }

  export type GamesWhereInput = {
    AND?: GamesWhereInput | GamesWhereInput[]
    OR?: GamesWhereInput[]
    NOT?: GamesWhereInput | GamesWhereInput[]
    id?: IntFilter<"Games"> | number
    year?: IntFilter<"Games"> | number
    week?: IntFilter<"Games"> | number
    home_team_id?: IntFilter<"Games"> | number
    road_team_id?: IntFilter<"Games"> | number
    stadium?: StringFilter<"Games"> | string
    time?: DateTimeFilter<"Games"> | Date | string
    winning_team_id?: IntNullableFilter<"Games"> | number | null
    home_score?: IntNullableFilter<"Games"> | number | null
    road_score?: IntNullableFilter<"Games"> | number | null
    is_finalized?: BoolFilter<"Games"> | boolean
    updated_at?: DateTimeFilter<"Games"> | Date | string
    home_team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    road_team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    winning_team?: XOR<TeamsNullableRelationFilter, TeamsWhereInput> | null
    picks?: PicksListRelationFilter
  }

  export type GamesOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    stadium?: SortOrder
    time?: SortOrder
    winning_team_id?: SortOrderInput | SortOrder
    home_score?: SortOrderInput | SortOrder
    road_score?: SortOrderInput | SortOrder
    is_finalized?: SortOrder
    updated_at?: SortOrder
    home_team?: TeamsOrderByWithRelationInput
    road_team?: TeamsOrderByWithRelationInput
    winning_team?: TeamsOrderByWithRelationInput
    picks?: PicksOrderByRelationAggregateInput
  }

  export type GamesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GamesWhereInput | GamesWhereInput[]
    OR?: GamesWhereInput[]
    NOT?: GamesWhereInput | GamesWhereInput[]
    year?: IntFilter<"Games"> | number
    week?: IntFilter<"Games"> | number
    home_team_id?: IntFilter<"Games"> | number
    road_team_id?: IntFilter<"Games"> | number
    stadium?: StringFilter<"Games"> | string
    time?: DateTimeFilter<"Games"> | Date | string
    winning_team_id?: IntNullableFilter<"Games"> | number | null
    home_score?: IntNullableFilter<"Games"> | number | null
    road_score?: IntNullableFilter<"Games"> | number | null
    is_finalized?: BoolFilter<"Games"> | boolean
    updated_at?: DateTimeFilter<"Games"> | Date | string
    home_team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    road_team?: XOR<TeamsRelationFilter, TeamsWhereInput>
    winning_team?: XOR<TeamsNullableRelationFilter, TeamsWhereInput> | null
    picks?: PicksListRelationFilter
  }, "id">

  export type GamesOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    stadium?: SortOrder
    time?: SortOrder
    winning_team_id?: SortOrderInput | SortOrder
    home_score?: SortOrderInput | SortOrder
    road_score?: SortOrderInput | SortOrder
    is_finalized?: SortOrder
    updated_at?: SortOrder
    _count?: GamesCountOrderByAggregateInput
    _avg?: GamesAvgOrderByAggregateInput
    _max?: GamesMaxOrderByAggregateInput
    _min?: GamesMinOrderByAggregateInput
    _sum?: GamesSumOrderByAggregateInput
  }

  export type GamesScalarWhereWithAggregatesInput = {
    AND?: GamesScalarWhereWithAggregatesInput | GamesScalarWhereWithAggregatesInput[]
    OR?: GamesScalarWhereWithAggregatesInput[]
    NOT?: GamesScalarWhereWithAggregatesInput | GamesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Games"> | number
    year?: IntWithAggregatesFilter<"Games"> | number
    week?: IntWithAggregatesFilter<"Games"> | number
    home_team_id?: IntWithAggregatesFilter<"Games"> | number
    road_team_id?: IntWithAggregatesFilter<"Games"> | number
    stadium?: StringWithAggregatesFilter<"Games"> | string
    time?: DateTimeWithAggregatesFilter<"Games"> | Date | string
    winning_team_id?: IntNullableWithAggregatesFilter<"Games"> | number | null
    home_score?: IntNullableWithAggregatesFilter<"Games"> | number | null
    road_score?: IntNullableWithAggregatesFilter<"Games"> | number | null
    is_finalized?: BoolWithAggregatesFilter<"Games"> | boolean
    updated_at?: DateTimeWithAggregatesFilter<"Games"> | Date | string
  }

  export type TeamsWhereInput = {
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    id?: IntFilter<"Teams"> | number
    name?: StringFilter<"Teams"> | string
    geo?: StringFilter<"Teams"> | string
    stadium?: StringFilter<"Teams"> | string
    division?: StringFilter<"Teams"> | string
    conference?: StringFilter<"Teams"> | string
    logo_url?: StringNullableFilter<"Teams"> | string | null
    created_at?: DateTimeFilter<"Teams"> | Date | string
    updated_at?: DateTimeFilter<"Teams"> | Date | string
    home_games?: GamesListRelationFilter
    road_games?: GamesListRelationFilter
    winning_games?: GamesListRelationFilter
    picks?: PicksListRelationFilter
  }

  export type TeamsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    geo?: SortOrder
    stadium?: SortOrder
    division?: SortOrder
    conference?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    home_games?: GamesOrderByRelationAggregateInput
    road_games?: GamesOrderByRelationAggregateInput
    winning_games?: GamesOrderByRelationAggregateInput
    picks?: PicksOrderByRelationAggregateInput
  }

  export type TeamsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TeamsWhereInput | TeamsWhereInput[]
    OR?: TeamsWhereInput[]
    NOT?: TeamsWhereInput | TeamsWhereInput[]
    geo?: StringFilter<"Teams"> | string
    stadium?: StringFilter<"Teams"> | string
    division?: StringFilter<"Teams"> | string
    conference?: StringFilter<"Teams"> | string
    logo_url?: StringNullableFilter<"Teams"> | string | null
    created_at?: DateTimeFilter<"Teams"> | Date | string
    updated_at?: DateTimeFilter<"Teams"> | Date | string
    home_games?: GamesListRelationFilter
    road_games?: GamesListRelationFilter
    winning_games?: GamesListRelationFilter
    picks?: PicksListRelationFilter
  }, "id" | "name">

  export type TeamsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    geo?: SortOrder
    stadium?: SortOrder
    division?: SortOrder
    conference?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TeamsCountOrderByAggregateInput
    _avg?: TeamsAvgOrderByAggregateInput
    _max?: TeamsMaxOrderByAggregateInput
    _min?: TeamsMinOrderByAggregateInput
    _sum?: TeamsSumOrderByAggregateInput
  }

  export type TeamsScalarWhereWithAggregatesInput = {
    AND?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    OR?: TeamsScalarWhereWithAggregatesInput[]
    NOT?: TeamsScalarWhereWithAggregatesInput | TeamsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teams"> | number
    name?: StringWithAggregatesFilter<"Teams"> | string
    geo?: StringWithAggregatesFilter<"Teams"> | string
    stadium?: StringWithAggregatesFilter<"Teams"> | string
    division?: StringWithAggregatesFilter<"Teams"> | string
    conference?: StringWithAggregatesFilter<"Teams"> | string
    logo_url?: StringNullableWithAggregatesFilter<"Teams"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Teams"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Teams"> | Date | string
  }

  export type WeeklyScoresWhereInput = {
    AND?: WeeklyScoresWhereInput | WeeklyScoresWhereInput[]
    OR?: WeeklyScoresWhereInput[]
    NOT?: WeeklyScoresWhereInput | WeeklyScoresWhereInput[]
    id?: IntFilter<"WeeklyScores"> | number
    user_id?: IntFilter<"WeeklyScores"> | number
    year?: IntFilter<"WeeklyScores"> | number
    week?: IntFilter<"WeeklyScores"> | number
    correct_picks?: IntFilter<"WeeklyScores"> | number
    total_picks?: IntFilter<"WeeklyScores"> | number
    created_at?: DateTimeFilter<"WeeklyScores"> | Date | string
    updated_at?: DateTimeFilter<"WeeklyScores"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type WeeklyScoresOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type WeeklyScoresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_year_week?: WeeklyScoresUser_idYearWeekCompoundUniqueInput
    AND?: WeeklyScoresWhereInput | WeeklyScoresWhereInput[]
    OR?: WeeklyScoresWhereInput[]
    NOT?: WeeklyScoresWhereInput | WeeklyScoresWhereInput[]
    user_id?: IntFilter<"WeeklyScores"> | number
    year?: IntFilter<"WeeklyScores"> | number
    week?: IntFilter<"WeeklyScores"> | number
    correct_picks?: IntFilter<"WeeklyScores"> | number
    total_picks?: IntFilter<"WeeklyScores"> | number
    created_at?: DateTimeFilter<"WeeklyScores"> | Date | string
    updated_at?: DateTimeFilter<"WeeklyScores"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "user_id_year_week">

  export type WeeklyScoresOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: WeeklyScoresCountOrderByAggregateInput
    _avg?: WeeklyScoresAvgOrderByAggregateInput
    _max?: WeeklyScoresMaxOrderByAggregateInput
    _min?: WeeklyScoresMinOrderByAggregateInput
    _sum?: WeeklyScoresSumOrderByAggregateInput
  }

  export type WeeklyScoresScalarWhereWithAggregatesInput = {
    AND?: WeeklyScoresScalarWhereWithAggregatesInput | WeeklyScoresScalarWhereWithAggregatesInput[]
    OR?: WeeklyScoresScalarWhereWithAggregatesInput[]
    NOT?: WeeklyScoresScalarWhereWithAggregatesInput | WeeklyScoresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WeeklyScores"> | number
    user_id?: IntWithAggregatesFilter<"WeeklyScores"> | number
    year?: IntWithAggregatesFilter<"WeeklyScores"> | number
    week?: IntWithAggregatesFilter<"WeeklyScores"> | number
    correct_picks?: IntWithAggregatesFilter<"WeeklyScores"> | number
    total_picks?: IntWithAggregatesFilter<"WeeklyScores"> | number
    created_at?: DateTimeWithAggregatesFilter<"WeeklyScores"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"WeeklyScores"> | Date | string
  }

  export type UsersCreateInput = {
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaguesCreateInput = {
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesCreateNestedManyWithoutLeagueInput
    createdByUser: UsersCreateNestedOneWithoutCreatedLeaguesInput
  }

  export type LeaguesUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    created_by: number
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeaguesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUpdateManyWithoutLeagueNestedInput
    createdByUser?: UsersUpdateOneRequiredWithoutCreatedLeaguesNestedInput
  }

  export type LeaguesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeaguesCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    created_by: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaguesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaguesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesCreateInput = {
    joined_at?: Date | string
    user: UsersCreateNestedOneWithoutUserLeaguesInput
    league: LeaguesCreateNestedOneWithoutUserLeaguesInput
  }

  export type UserLeaguesUncheckedCreateInput = {
    id?: number
    user_id: number
    league_id: number
    joined_at?: Date | string
  }

  export type UserLeaguesUpdateInput = {
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUserLeaguesNestedInput
    league?: LeaguesUpdateOneRequiredWithoutUserLeaguesNestedInput
  }

  export type UserLeaguesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesCreateManyInput = {
    id?: number
    user_id: number
    league_id: number
    joined_at?: Date | string
  }

  export type UserLeaguesUpdateManyMutationInput = {
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamsCreateNestedOneWithoutPicksInput
    user: UsersCreateNestedOneWithoutPicksInput
    game: GamesCreateNestedOneWithoutPicksInput
  }

  export type PicksUncheckedCreateInput = {
    id?: number
    team_id: number
    user_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamsUpdateOneRequiredWithoutPicksNestedInput
    user?: UsersUpdateOneRequiredWithoutPicksNestedInput
    game?: GamesUpdateOneRequiredWithoutPicksNestedInput
  }

  export type PicksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksCreateManyInput = {
    id?: number
    team_id: number
    user_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamesCreateInput = {
    year: number
    week: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    home_team: TeamsCreateNestedOneWithoutHome_gamesInput
    road_team: TeamsCreateNestedOneWithoutRoad_gamesInput
    winning_team?: TeamsCreateNestedOneWithoutWinning_gamesInput
    picks?: PicksCreateNestedManyWithoutGameInput
  }

  export type GamesUncheckedCreateInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutGameInput
  }

  export type GamesUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: TeamsUpdateOneRequiredWithoutHome_gamesNestedInput
    road_team?: TeamsUpdateOneRequiredWithoutRoad_gamesNestedInput
    winning_team?: TeamsUpdateOneWithoutWinning_gamesNestedInput
    picks?: PicksUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GamesCreateManyInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
  }

  export type GamesUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsCreateInput = {
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesCreateNestedManyWithoutHome_teamInput
    road_games?: GamesCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesCreateNestedManyWithoutWinning_teamInput
    picks?: PicksCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesUncheckedCreateNestedManyWithoutHome_teamInput
    road_games?: GamesUncheckedCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesUncheckedCreateNestedManyWithoutWinning_teamInput
    picks?: PicksUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUncheckedUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUncheckedUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUncheckedUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamsCreateManyInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TeamsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresCreateInput = {
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UsersCreateNestedOneWithoutWeeklyScoresInput
  }

  export type WeeklyScoresUncheckedCreateInput = {
    id?: number
    user_id: number
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WeeklyScoresUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutWeeklyScoresNestedInput
  }

  export type WeeklyScoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresCreateManyInput = {
    id?: number
    user_id: number
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WeeklyScoresUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PicksListRelationFilter = {
    every?: PicksWhereInput
    some?: PicksWhereInput
    none?: PicksWhereInput
  }

  export type UserLeaguesListRelationFilter = {
    every?: UserLeaguesWhereInput
    some?: UserLeaguesWhereInput
    none?: UserLeaguesWhereInput
  }

  export type WeeklyScoresListRelationFilter = {
    every?: WeeklyScoresWhereInput
    some?: WeeklyScoresWhereInput
    none?: WeeklyScoresWhereInput
  }

  export type LeaguesListRelationFilter = {
    every?: LeaguesWhereInput
    some?: LeaguesWhereInput
    none?: LeaguesWhereInput
  }

  export type PicksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLeaguesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeeklyScoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaguesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LeaguesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaguesAvgOrderByAggregateInput = {
    id?: SortOrder
    created_by?: SortOrder
  }

  export type LeaguesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaguesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LeaguesSumOrderByAggregateInput = {
    id?: SortOrder
    created_by?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type LeaguesRelationFilter = {
    is?: LeaguesWhereInput
    isNot?: LeaguesWhereInput
  }

  export type UserLeaguesUser_idLeague_idCompoundUniqueInput = {
    user_id: number
    league_id: number
  }

  export type UserLeaguesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
    joined_at?: SortOrder
  }

  export type UserLeaguesAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
  }

  export type UserLeaguesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
    joined_at?: SortOrder
  }

  export type UserLeaguesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
    joined_at?: SortOrder
  }

  export type UserLeaguesSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    league_id?: SortOrder
  }

  export type TeamsRelationFilter = {
    is?: TeamsWhereInput
    isNot?: TeamsWhereInput
  }

  export type GamesRelationFilter = {
    is?: GamesWhereInput
    isNot?: GamesWhereInput
  }

  export type PicksUser_idGame_idCompoundUniqueInput = {
    user_id: number
    game_id: number
  }

  export type PicksCountOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PicksAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type PicksMaxOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PicksMinOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PicksSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TeamsNullableRelationFilter = {
    is?: TeamsWhereInput | null
    isNot?: TeamsWhereInput | null
  }

  export type GamesCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    stadium?: SortOrder
    time?: SortOrder
    winning_team_id?: SortOrder
    home_score?: SortOrder
    road_score?: SortOrder
    is_finalized?: SortOrder
    updated_at?: SortOrder
  }

  export type GamesAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    winning_team_id?: SortOrder
    home_score?: SortOrder
    road_score?: SortOrder
  }

  export type GamesMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    stadium?: SortOrder
    time?: SortOrder
    winning_team_id?: SortOrder
    home_score?: SortOrder
    road_score?: SortOrder
    is_finalized?: SortOrder
    updated_at?: SortOrder
  }

  export type GamesMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    stadium?: SortOrder
    time?: SortOrder
    winning_team_id?: SortOrder
    home_score?: SortOrder
    road_score?: SortOrder
    is_finalized?: SortOrder
    updated_at?: SortOrder
  }

  export type GamesSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    home_team_id?: SortOrder
    road_team_id?: SortOrder
    winning_team_id?: SortOrder
    home_score?: SortOrder
    road_score?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GamesListRelationFilter = {
    every?: GamesWhereInput
    some?: GamesWhereInput
    none?: GamesWhereInput
  }

  export type GamesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    geo?: SortOrder
    stadium?: SortOrder
    division?: SortOrder
    conference?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    geo?: SortOrder
    stadium?: SortOrder
    division?: SortOrder
    conference?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    geo?: SortOrder
    stadium?: SortOrder
    division?: SortOrder
    conference?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TeamsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeeklyScoresUser_idYearWeekCompoundUniqueInput = {
    user_id: number
    year: number
    week: number
  }

  export type WeeklyScoresCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WeeklyScoresAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
  }

  export type WeeklyScoresMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WeeklyScoresMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WeeklyScoresSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
    week?: SortOrder
    correct_picks?: SortOrder
    total_picks?: SortOrder
  }

  export type PicksCreateNestedManyWithoutUserInput = {
    create?: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput> | PicksCreateWithoutUserInput[] | PicksUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutUserInput | PicksCreateOrConnectWithoutUserInput[]
    createMany?: PicksCreateManyUserInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type UserLeaguesCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput> | UserLeaguesCreateWithoutUserInput[] | UserLeaguesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutUserInput | UserLeaguesCreateOrConnectWithoutUserInput[]
    createMany?: UserLeaguesCreateManyUserInputEnvelope
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
  }

  export type WeeklyScoresCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput> | WeeklyScoresCreateWithoutUserInput[] | WeeklyScoresUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyScoresCreateOrConnectWithoutUserInput | WeeklyScoresCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyScoresCreateManyUserInputEnvelope
    connect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
  }

  export type LeaguesCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput> | LeaguesCreateWithoutCreatedByUserInput[] | LeaguesUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LeaguesCreateOrConnectWithoutCreatedByUserInput | LeaguesCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: LeaguesCreateManyCreatedByUserInputEnvelope
    connect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
  }

  export type PicksUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput> | PicksCreateWithoutUserInput[] | PicksUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutUserInput | PicksCreateOrConnectWithoutUserInput[]
    createMany?: PicksCreateManyUserInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type UserLeaguesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput> | UserLeaguesCreateWithoutUserInput[] | UserLeaguesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutUserInput | UserLeaguesCreateOrConnectWithoutUserInput[]
    createMany?: UserLeaguesCreateManyUserInputEnvelope
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
  }

  export type WeeklyScoresUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput> | WeeklyScoresCreateWithoutUserInput[] | WeeklyScoresUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyScoresCreateOrConnectWithoutUserInput | WeeklyScoresCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyScoresCreateManyUserInputEnvelope
    connect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
  }

  export type LeaguesUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput> | LeaguesCreateWithoutCreatedByUserInput[] | LeaguesUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LeaguesCreateOrConnectWithoutCreatedByUserInput | LeaguesCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: LeaguesCreateManyCreatedByUserInputEnvelope
    connect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PicksUpdateManyWithoutUserNestedInput = {
    create?: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput> | PicksCreateWithoutUserInput[] | PicksUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutUserInput | PicksCreateOrConnectWithoutUserInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutUserInput | PicksUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PicksCreateManyUserInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutUserInput | PicksUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutUserInput | PicksUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type UserLeaguesUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput> | UserLeaguesCreateWithoutUserInput[] | UserLeaguesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutUserInput | UserLeaguesCreateOrConnectWithoutUserInput[]
    upsert?: UserLeaguesUpsertWithWhereUniqueWithoutUserInput | UserLeaguesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeaguesCreateManyUserInputEnvelope
    set?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    disconnect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    delete?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    update?: UserLeaguesUpdateWithWhereUniqueWithoutUserInput | UserLeaguesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeaguesUpdateManyWithWhereWithoutUserInput | UserLeaguesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
  }

  export type WeeklyScoresUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput> | WeeklyScoresCreateWithoutUserInput[] | WeeklyScoresUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyScoresCreateOrConnectWithoutUserInput | WeeklyScoresCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyScoresUpsertWithWhereUniqueWithoutUserInput | WeeklyScoresUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyScoresCreateManyUserInputEnvelope
    set?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    disconnect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    delete?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    connect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    update?: WeeklyScoresUpdateWithWhereUniqueWithoutUserInput | WeeklyScoresUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyScoresUpdateManyWithWhereWithoutUserInput | WeeklyScoresUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyScoresScalarWhereInput | WeeklyScoresScalarWhereInput[]
  }

  export type LeaguesUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput> | LeaguesCreateWithoutCreatedByUserInput[] | LeaguesUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LeaguesCreateOrConnectWithoutCreatedByUserInput | LeaguesCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: LeaguesUpsertWithWhereUniqueWithoutCreatedByUserInput | LeaguesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: LeaguesCreateManyCreatedByUserInputEnvelope
    set?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    disconnect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    delete?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    connect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    update?: LeaguesUpdateWithWhereUniqueWithoutCreatedByUserInput | LeaguesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: LeaguesUpdateManyWithWhereWithoutCreatedByUserInput | LeaguesUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: LeaguesScalarWhereInput | LeaguesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PicksUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput> | PicksCreateWithoutUserInput[] | PicksUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutUserInput | PicksCreateOrConnectWithoutUserInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutUserInput | PicksUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PicksCreateManyUserInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutUserInput | PicksUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutUserInput | PicksUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type UserLeaguesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput> | UserLeaguesCreateWithoutUserInput[] | UserLeaguesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutUserInput | UserLeaguesCreateOrConnectWithoutUserInput[]
    upsert?: UserLeaguesUpsertWithWhereUniqueWithoutUserInput | UserLeaguesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeaguesCreateManyUserInputEnvelope
    set?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    disconnect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    delete?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    update?: UserLeaguesUpdateWithWhereUniqueWithoutUserInput | UserLeaguesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeaguesUpdateManyWithWhereWithoutUserInput | UserLeaguesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
  }

  export type WeeklyScoresUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput> | WeeklyScoresCreateWithoutUserInput[] | WeeklyScoresUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyScoresCreateOrConnectWithoutUserInput | WeeklyScoresCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyScoresUpsertWithWhereUniqueWithoutUserInput | WeeklyScoresUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyScoresCreateManyUserInputEnvelope
    set?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    disconnect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    delete?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    connect?: WeeklyScoresWhereUniqueInput | WeeklyScoresWhereUniqueInput[]
    update?: WeeklyScoresUpdateWithWhereUniqueWithoutUserInput | WeeklyScoresUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyScoresUpdateManyWithWhereWithoutUserInput | WeeklyScoresUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyScoresScalarWhereInput | WeeklyScoresScalarWhereInput[]
  }

  export type LeaguesUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput> | LeaguesCreateWithoutCreatedByUserInput[] | LeaguesUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LeaguesCreateOrConnectWithoutCreatedByUserInput | LeaguesCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: LeaguesUpsertWithWhereUniqueWithoutCreatedByUserInput | LeaguesUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: LeaguesCreateManyCreatedByUserInputEnvelope
    set?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    disconnect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    delete?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    connect?: LeaguesWhereUniqueInput | LeaguesWhereUniqueInput[]
    update?: LeaguesUpdateWithWhereUniqueWithoutCreatedByUserInput | LeaguesUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: LeaguesUpdateManyWithWhereWithoutCreatedByUserInput | LeaguesUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: LeaguesScalarWhereInput | LeaguesScalarWhereInput[]
  }

  export type UserLeaguesCreateNestedManyWithoutLeagueInput = {
    create?: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput> | UserLeaguesCreateWithoutLeagueInput[] | UserLeaguesUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutLeagueInput | UserLeaguesCreateOrConnectWithoutLeagueInput[]
    createMany?: UserLeaguesCreateManyLeagueInputEnvelope
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
  }

  export type UsersCreateNestedOneWithoutCreatedLeaguesInput = {
    create?: XOR<UsersCreateWithoutCreatedLeaguesInput, UsersUncheckedCreateWithoutCreatedLeaguesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreatedLeaguesInput
    connect?: UsersWhereUniqueInput
  }

  export type UserLeaguesUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput> | UserLeaguesCreateWithoutLeagueInput[] | UserLeaguesUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutLeagueInput | UserLeaguesCreateOrConnectWithoutLeagueInput[]
    createMany?: UserLeaguesCreateManyLeagueInputEnvelope
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserLeaguesUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput> | UserLeaguesCreateWithoutLeagueInput[] | UserLeaguesUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutLeagueInput | UserLeaguesCreateOrConnectWithoutLeagueInput[]
    upsert?: UserLeaguesUpsertWithWhereUniqueWithoutLeagueInput | UserLeaguesUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: UserLeaguesCreateManyLeagueInputEnvelope
    set?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    disconnect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    delete?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    update?: UserLeaguesUpdateWithWhereUniqueWithoutLeagueInput | UserLeaguesUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: UserLeaguesUpdateManyWithWhereWithoutLeagueInput | UserLeaguesUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
  }

  export type UsersUpdateOneRequiredWithoutCreatedLeaguesNestedInput = {
    create?: XOR<UsersCreateWithoutCreatedLeaguesInput, UsersUncheckedCreateWithoutCreatedLeaguesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreatedLeaguesInput
    upsert?: UsersUpsertWithoutCreatedLeaguesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCreatedLeaguesInput, UsersUpdateWithoutCreatedLeaguesInput>, UsersUncheckedUpdateWithoutCreatedLeaguesInput>
  }

  export type UserLeaguesUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput> | UserLeaguesCreateWithoutLeagueInput[] | UserLeaguesUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeaguesCreateOrConnectWithoutLeagueInput | UserLeaguesCreateOrConnectWithoutLeagueInput[]
    upsert?: UserLeaguesUpsertWithWhereUniqueWithoutLeagueInput | UserLeaguesUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: UserLeaguesCreateManyLeagueInputEnvelope
    set?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    disconnect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    delete?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    connect?: UserLeaguesWhereUniqueInput | UserLeaguesWhereUniqueInput[]
    update?: UserLeaguesUpdateWithWhereUniqueWithoutLeagueInput | UserLeaguesUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: UserLeaguesUpdateManyWithWhereWithoutLeagueInput | UserLeaguesUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutUserLeaguesInput = {
    create?: XOR<UsersCreateWithoutUserLeaguesInput, UsersUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserLeaguesInput
    connect?: UsersWhereUniqueInput
  }

  export type LeaguesCreateNestedOneWithoutUserLeaguesInput = {
    create?: XOR<LeaguesCreateWithoutUserLeaguesInput, LeaguesUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: LeaguesCreateOrConnectWithoutUserLeaguesInput
    connect?: LeaguesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutUserLeaguesNestedInput = {
    create?: XOR<UsersCreateWithoutUserLeaguesInput, UsersUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserLeaguesInput
    upsert?: UsersUpsertWithoutUserLeaguesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUserLeaguesInput, UsersUpdateWithoutUserLeaguesInput>, UsersUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type LeaguesUpdateOneRequiredWithoutUserLeaguesNestedInput = {
    create?: XOR<LeaguesCreateWithoutUserLeaguesInput, LeaguesUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: LeaguesCreateOrConnectWithoutUserLeaguesInput
    upsert?: LeaguesUpsertWithoutUserLeaguesInput
    connect?: LeaguesWhereUniqueInput
    update?: XOR<XOR<LeaguesUpdateToOneWithWhereWithoutUserLeaguesInput, LeaguesUpdateWithoutUserLeaguesInput>, LeaguesUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type TeamsCreateNestedOneWithoutPicksInput = {
    create?: XOR<TeamsCreateWithoutPicksInput, TeamsUncheckedCreateWithoutPicksInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutPicksInput
    connect?: TeamsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutPicksInput = {
    create?: XOR<UsersCreateWithoutPicksInput, UsersUncheckedCreateWithoutPicksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPicksInput
    connect?: UsersWhereUniqueInput
  }

  export type GamesCreateNestedOneWithoutPicksInput = {
    create?: XOR<GamesCreateWithoutPicksInput, GamesUncheckedCreateWithoutPicksInput>
    connectOrCreate?: GamesCreateOrConnectWithoutPicksInput
    connect?: GamesWhereUniqueInput
  }

  export type TeamsUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<TeamsCreateWithoutPicksInput, TeamsUncheckedCreateWithoutPicksInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutPicksInput
    upsert?: TeamsUpsertWithoutPicksInput
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutPicksInput, TeamsUpdateWithoutPicksInput>, TeamsUncheckedUpdateWithoutPicksInput>
  }

  export type UsersUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<UsersCreateWithoutPicksInput, UsersUncheckedCreateWithoutPicksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPicksInput
    upsert?: UsersUpsertWithoutPicksInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutPicksInput, UsersUpdateWithoutPicksInput>, UsersUncheckedUpdateWithoutPicksInput>
  }

  export type GamesUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<GamesCreateWithoutPicksInput, GamesUncheckedCreateWithoutPicksInput>
    connectOrCreate?: GamesCreateOrConnectWithoutPicksInput
    upsert?: GamesUpsertWithoutPicksInput
    connect?: GamesWhereUniqueInput
    update?: XOR<XOR<GamesUpdateToOneWithWhereWithoutPicksInput, GamesUpdateWithoutPicksInput>, GamesUncheckedUpdateWithoutPicksInput>
  }

  export type TeamsCreateNestedOneWithoutHome_gamesInput = {
    create?: XOR<TeamsCreateWithoutHome_gamesInput, TeamsUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutHome_gamesInput
    connect?: TeamsWhereUniqueInput
  }

  export type TeamsCreateNestedOneWithoutRoad_gamesInput = {
    create?: XOR<TeamsCreateWithoutRoad_gamesInput, TeamsUncheckedCreateWithoutRoad_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutRoad_gamesInput
    connect?: TeamsWhereUniqueInput
  }

  export type TeamsCreateNestedOneWithoutWinning_gamesInput = {
    create?: XOR<TeamsCreateWithoutWinning_gamesInput, TeamsUncheckedCreateWithoutWinning_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutWinning_gamesInput
    connect?: TeamsWhereUniqueInput
  }

  export type PicksCreateNestedManyWithoutGameInput = {
    create?: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput> | PicksCreateWithoutGameInput[] | PicksUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutGameInput | PicksCreateOrConnectWithoutGameInput[]
    createMany?: PicksCreateManyGameInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type PicksUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput> | PicksCreateWithoutGameInput[] | PicksUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutGameInput | PicksCreateOrConnectWithoutGameInput[]
    createMany?: PicksCreateManyGameInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeamsUpdateOneRequiredWithoutHome_gamesNestedInput = {
    create?: XOR<TeamsCreateWithoutHome_gamesInput, TeamsUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutHome_gamesInput
    upsert?: TeamsUpsertWithoutHome_gamesInput
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutHome_gamesInput, TeamsUpdateWithoutHome_gamesInput>, TeamsUncheckedUpdateWithoutHome_gamesInput>
  }

  export type TeamsUpdateOneRequiredWithoutRoad_gamesNestedInput = {
    create?: XOR<TeamsCreateWithoutRoad_gamesInput, TeamsUncheckedCreateWithoutRoad_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutRoad_gamesInput
    upsert?: TeamsUpsertWithoutRoad_gamesInput
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutRoad_gamesInput, TeamsUpdateWithoutRoad_gamesInput>, TeamsUncheckedUpdateWithoutRoad_gamesInput>
  }

  export type TeamsUpdateOneWithoutWinning_gamesNestedInput = {
    create?: XOR<TeamsCreateWithoutWinning_gamesInput, TeamsUncheckedCreateWithoutWinning_gamesInput>
    connectOrCreate?: TeamsCreateOrConnectWithoutWinning_gamesInput
    upsert?: TeamsUpsertWithoutWinning_gamesInput
    disconnect?: TeamsWhereInput | boolean
    delete?: TeamsWhereInput | boolean
    connect?: TeamsWhereUniqueInput
    update?: XOR<XOR<TeamsUpdateToOneWithWhereWithoutWinning_gamesInput, TeamsUpdateWithoutWinning_gamesInput>, TeamsUncheckedUpdateWithoutWinning_gamesInput>
  }

  export type PicksUpdateManyWithoutGameNestedInput = {
    create?: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput> | PicksCreateWithoutGameInput[] | PicksUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutGameInput | PicksCreateOrConnectWithoutGameInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutGameInput | PicksUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PicksCreateManyGameInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutGameInput | PicksUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutGameInput | PicksUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type PicksUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput> | PicksCreateWithoutGameInput[] | PicksUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutGameInput | PicksCreateOrConnectWithoutGameInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutGameInput | PicksUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PicksCreateManyGameInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutGameInput | PicksUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutGameInput | PicksUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type GamesCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput> | GamesCreateWithoutHome_teamInput[] | GamesUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutHome_teamInput | GamesCreateOrConnectWithoutHome_teamInput[]
    createMany?: GamesCreateManyHome_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type GamesCreateNestedManyWithoutRoad_teamInput = {
    create?: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput> | GamesCreateWithoutRoad_teamInput[] | GamesUncheckedCreateWithoutRoad_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutRoad_teamInput | GamesCreateOrConnectWithoutRoad_teamInput[]
    createMany?: GamesCreateManyRoad_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type GamesCreateNestedManyWithoutWinning_teamInput = {
    create?: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput> | GamesCreateWithoutWinning_teamInput[] | GamesUncheckedCreateWithoutWinning_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutWinning_teamInput | GamesCreateOrConnectWithoutWinning_teamInput[]
    createMany?: GamesCreateManyWinning_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type PicksCreateNestedManyWithoutTeamInput = {
    create?: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput> | PicksCreateWithoutTeamInput[] | PicksUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutTeamInput | PicksCreateOrConnectWithoutTeamInput[]
    createMany?: PicksCreateManyTeamInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type GamesUncheckedCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput> | GamesCreateWithoutHome_teamInput[] | GamesUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutHome_teamInput | GamesCreateOrConnectWithoutHome_teamInput[]
    createMany?: GamesCreateManyHome_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type GamesUncheckedCreateNestedManyWithoutRoad_teamInput = {
    create?: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput> | GamesCreateWithoutRoad_teamInput[] | GamesUncheckedCreateWithoutRoad_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutRoad_teamInput | GamesCreateOrConnectWithoutRoad_teamInput[]
    createMany?: GamesCreateManyRoad_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type GamesUncheckedCreateNestedManyWithoutWinning_teamInput = {
    create?: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput> | GamesCreateWithoutWinning_teamInput[] | GamesUncheckedCreateWithoutWinning_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutWinning_teamInput | GamesCreateOrConnectWithoutWinning_teamInput[]
    createMany?: GamesCreateManyWinning_teamInputEnvelope
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
  }

  export type PicksUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput> | PicksCreateWithoutTeamInput[] | PicksUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutTeamInput | PicksCreateOrConnectWithoutTeamInput[]
    createMany?: PicksCreateManyTeamInputEnvelope
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
  }

  export type GamesUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput> | GamesCreateWithoutHome_teamInput[] | GamesUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutHome_teamInput | GamesCreateOrConnectWithoutHome_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutHome_teamInput | GamesUpsertWithWhereUniqueWithoutHome_teamInput[]
    createMany?: GamesCreateManyHome_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutHome_teamInput | GamesUpdateWithWhereUniqueWithoutHome_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutHome_teamInput | GamesUpdateManyWithWhereWithoutHome_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type GamesUpdateManyWithoutRoad_teamNestedInput = {
    create?: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput> | GamesCreateWithoutRoad_teamInput[] | GamesUncheckedCreateWithoutRoad_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutRoad_teamInput | GamesCreateOrConnectWithoutRoad_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutRoad_teamInput | GamesUpsertWithWhereUniqueWithoutRoad_teamInput[]
    createMany?: GamesCreateManyRoad_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutRoad_teamInput | GamesUpdateWithWhereUniqueWithoutRoad_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutRoad_teamInput | GamesUpdateManyWithWhereWithoutRoad_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type GamesUpdateManyWithoutWinning_teamNestedInput = {
    create?: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput> | GamesCreateWithoutWinning_teamInput[] | GamesUncheckedCreateWithoutWinning_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutWinning_teamInput | GamesCreateOrConnectWithoutWinning_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutWinning_teamInput | GamesUpsertWithWhereUniqueWithoutWinning_teamInput[]
    createMany?: GamesCreateManyWinning_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutWinning_teamInput | GamesUpdateWithWhereUniqueWithoutWinning_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutWinning_teamInput | GamesUpdateManyWithWhereWithoutWinning_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type PicksUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput> | PicksCreateWithoutTeamInput[] | PicksUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutTeamInput | PicksCreateOrConnectWithoutTeamInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutTeamInput | PicksUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PicksCreateManyTeamInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutTeamInput | PicksUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutTeamInput | PicksUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type GamesUncheckedUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput> | GamesCreateWithoutHome_teamInput[] | GamesUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutHome_teamInput | GamesCreateOrConnectWithoutHome_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutHome_teamInput | GamesUpsertWithWhereUniqueWithoutHome_teamInput[]
    createMany?: GamesCreateManyHome_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutHome_teamInput | GamesUpdateWithWhereUniqueWithoutHome_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutHome_teamInput | GamesUpdateManyWithWhereWithoutHome_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type GamesUncheckedUpdateManyWithoutRoad_teamNestedInput = {
    create?: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput> | GamesCreateWithoutRoad_teamInput[] | GamesUncheckedCreateWithoutRoad_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutRoad_teamInput | GamesCreateOrConnectWithoutRoad_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutRoad_teamInput | GamesUpsertWithWhereUniqueWithoutRoad_teamInput[]
    createMany?: GamesCreateManyRoad_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutRoad_teamInput | GamesUpdateWithWhereUniqueWithoutRoad_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutRoad_teamInput | GamesUpdateManyWithWhereWithoutRoad_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type GamesUncheckedUpdateManyWithoutWinning_teamNestedInput = {
    create?: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput> | GamesCreateWithoutWinning_teamInput[] | GamesUncheckedCreateWithoutWinning_teamInput[]
    connectOrCreate?: GamesCreateOrConnectWithoutWinning_teamInput | GamesCreateOrConnectWithoutWinning_teamInput[]
    upsert?: GamesUpsertWithWhereUniqueWithoutWinning_teamInput | GamesUpsertWithWhereUniqueWithoutWinning_teamInput[]
    createMany?: GamesCreateManyWinning_teamInputEnvelope
    set?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    disconnect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    delete?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    connect?: GamesWhereUniqueInput | GamesWhereUniqueInput[]
    update?: GamesUpdateWithWhereUniqueWithoutWinning_teamInput | GamesUpdateWithWhereUniqueWithoutWinning_teamInput[]
    updateMany?: GamesUpdateManyWithWhereWithoutWinning_teamInput | GamesUpdateManyWithWhereWithoutWinning_teamInput[]
    deleteMany?: GamesScalarWhereInput | GamesScalarWhereInput[]
  }

  export type PicksUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput> | PicksCreateWithoutTeamInput[] | PicksUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PicksCreateOrConnectWithoutTeamInput | PicksCreateOrConnectWithoutTeamInput[]
    upsert?: PicksUpsertWithWhereUniqueWithoutTeamInput | PicksUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PicksCreateManyTeamInputEnvelope
    set?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    disconnect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    delete?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    connect?: PicksWhereUniqueInput | PicksWhereUniqueInput[]
    update?: PicksUpdateWithWhereUniqueWithoutTeamInput | PicksUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PicksUpdateManyWithWhereWithoutTeamInput | PicksUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PicksScalarWhereInput | PicksScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutWeeklyScoresInput = {
    create?: XOR<UsersCreateWithoutWeeklyScoresInput, UsersUncheckedCreateWithoutWeeklyScoresInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWeeklyScoresInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutWeeklyScoresNestedInput = {
    create?: XOR<UsersCreateWithoutWeeklyScoresInput, UsersUncheckedCreateWithoutWeeklyScoresInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWeeklyScoresInput
    upsert?: UsersUpsertWithoutWeeklyScoresInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutWeeklyScoresInput, UsersUpdateWithoutWeeklyScoresInput>, UsersUncheckedUpdateWithoutWeeklyScoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PicksCreateWithoutUserInput = {
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamsCreateNestedOneWithoutPicksInput
    game: GamesCreateNestedOneWithoutPicksInput
  }

  export type PicksUncheckedCreateWithoutUserInput = {
    id?: number
    team_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksCreateOrConnectWithoutUserInput = {
    where: PicksWhereUniqueInput
    create: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput>
  }

  export type PicksCreateManyUserInputEnvelope = {
    data: PicksCreateManyUserInput | PicksCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLeaguesCreateWithoutUserInput = {
    joined_at?: Date | string
    league: LeaguesCreateNestedOneWithoutUserLeaguesInput
  }

  export type UserLeaguesUncheckedCreateWithoutUserInput = {
    id?: number
    league_id: number
    joined_at?: Date | string
  }

  export type UserLeaguesCreateOrConnectWithoutUserInput = {
    where: UserLeaguesWhereUniqueInput
    create: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput>
  }

  export type UserLeaguesCreateManyUserInputEnvelope = {
    data: UserLeaguesCreateManyUserInput | UserLeaguesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyScoresCreateWithoutUserInput = {
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WeeklyScoresUncheckedCreateWithoutUserInput = {
    id?: number
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WeeklyScoresCreateOrConnectWithoutUserInput = {
    where: WeeklyScoresWhereUniqueInput
    create: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput>
  }

  export type WeeklyScoresCreateManyUserInputEnvelope = {
    data: WeeklyScoresCreateManyUserInput | WeeklyScoresCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeaguesCreateWithoutCreatedByUserInput = {
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesCreateNestedManyWithoutLeagueInput
  }

  export type LeaguesUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeaguesCreateOrConnectWithoutCreatedByUserInput = {
    where: LeaguesWhereUniqueInput
    create: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput>
  }

  export type LeaguesCreateManyCreatedByUserInputEnvelope = {
    data: LeaguesCreateManyCreatedByUserInput | LeaguesCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type PicksUpsertWithWhereUniqueWithoutUserInput = {
    where: PicksWhereUniqueInput
    update: XOR<PicksUpdateWithoutUserInput, PicksUncheckedUpdateWithoutUserInput>
    create: XOR<PicksCreateWithoutUserInput, PicksUncheckedCreateWithoutUserInput>
  }

  export type PicksUpdateWithWhereUniqueWithoutUserInput = {
    where: PicksWhereUniqueInput
    data: XOR<PicksUpdateWithoutUserInput, PicksUncheckedUpdateWithoutUserInput>
  }

  export type PicksUpdateManyWithWhereWithoutUserInput = {
    where: PicksScalarWhereInput
    data: XOR<PicksUpdateManyMutationInput, PicksUncheckedUpdateManyWithoutUserInput>
  }

  export type PicksScalarWhereInput = {
    AND?: PicksScalarWhereInput | PicksScalarWhereInput[]
    OR?: PicksScalarWhereInput[]
    NOT?: PicksScalarWhereInput | PicksScalarWhereInput[]
    id?: IntFilter<"Picks"> | number
    team_id?: IntFilter<"Picks"> | number
    user_id?: IntFilter<"Picks"> | number
    game_id?: IntFilter<"Picks"> | number
    created_at?: DateTimeFilter<"Picks"> | Date | string
    updated_at?: DateTimeFilter<"Picks"> | Date | string
  }

  export type UserLeaguesUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLeaguesWhereUniqueInput
    update: XOR<UserLeaguesUpdateWithoutUserInput, UserLeaguesUncheckedUpdateWithoutUserInput>
    create: XOR<UserLeaguesCreateWithoutUserInput, UserLeaguesUncheckedCreateWithoutUserInput>
  }

  export type UserLeaguesUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLeaguesWhereUniqueInput
    data: XOR<UserLeaguesUpdateWithoutUserInput, UserLeaguesUncheckedUpdateWithoutUserInput>
  }

  export type UserLeaguesUpdateManyWithWhereWithoutUserInput = {
    where: UserLeaguesScalarWhereInput
    data: XOR<UserLeaguesUpdateManyMutationInput, UserLeaguesUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLeaguesScalarWhereInput = {
    AND?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
    OR?: UserLeaguesScalarWhereInput[]
    NOT?: UserLeaguesScalarWhereInput | UserLeaguesScalarWhereInput[]
    id?: IntFilter<"UserLeagues"> | number
    user_id?: IntFilter<"UserLeagues"> | number
    league_id?: IntFilter<"UserLeagues"> | number
    joined_at?: DateTimeFilter<"UserLeagues"> | Date | string
  }

  export type WeeklyScoresUpsertWithWhereUniqueWithoutUserInput = {
    where: WeeklyScoresWhereUniqueInput
    update: XOR<WeeklyScoresUpdateWithoutUserInput, WeeklyScoresUncheckedUpdateWithoutUserInput>
    create: XOR<WeeklyScoresCreateWithoutUserInput, WeeklyScoresUncheckedCreateWithoutUserInput>
  }

  export type WeeklyScoresUpdateWithWhereUniqueWithoutUserInput = {
    where: WeeklyScoresWhereUniqueInput
    data: XOR<WeeklyScoresUpdateWithoutUserInput, WeeklyScoresUncheckedUpdateWithoutUserInput>
  }

  export type WeeklyScoresUpdateManyWithWhereWithoutUserInput = {
    where: WeeklyScoresScalarWhereInput
    data: XOR<WeeklyScoresUpdateManyMutationInput, WeeklyScoresUncheckedUpdateManyWithoutUserInput>
  }

  export type WeeklyScoresScalarWhereInput = {
    AND?: WeeklyScoresScalarWhereInput | WeeklyScoresScalarWhereInput[]
    OR?: WeeklyScoresScalarWhereInput[]
    NOT?: WeeklyScoresScalarWhereInput | WeeklyScoresScalarWhereInput[]
    id?: IntFilter<"WeeklyScores"> | number
    user_id?: IntFilter<"WeeklyScores"> | number
    year?: IntFilter<"WeeklyScores"> | number
    week?: IntFilter<"WeeklyScores"> | number
    correct_picks?: IntFilter<"WeeklyScores"> | number
    total_picks?: IntFilter<"WeeklyScores"> | number
    created_at?: DateTimeFilter<"WeeklyScores"> | Date | string
    updated_at?: DateTimeFilter<"WeeklyScores"> | Date | string
  }

  export type LeaguesUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: LeaguesWhereUniqueInput
    update: XOR<LeaguesUpdateWithoutCreatedByUserInput, LeaguesUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<LeaguesCreateWithoutCreatedByUserInput, LeaguesUncheckedCreateWithoutCreatedByUserInput>
  }

  export type LeaguesUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: LeaguesWhereUniqueInput
    data: XOR<LeaguesUpdateWithoutCreatedByUserInput, LeaguesUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type LeaguesUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: LeaguesScalarWhereInput
    data: XOR<LeaguesUpdateManyMutationInput, LeaguesUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type LeaguesScalarWhereInput = {
    AND?: LeaguesScalarWhereInput | LeaguesScalarWhereInput[]
    OR?: LeaguesScalarWhereInput[]
    NOT?: LeaguesScalarWhereInput | LeaguesScalarWhereInput[]
    id?: IntFilter<"Leagues"> | number
    name?: StringFilter<"Leagues"> | string
    description?: StringNullableFilter<"Leagues"> | string | null
    created_by?: IntFilter<"Leagues"> | number
    created_at?: DateTimeFilter<"Leagues"> | Date | string
    updated_at?: DateTimeFilter<"Leagues"> | Date | string
  }

  export type UserLeaguesCreateWithoutLeagueInput = {
    joined_at?: Date | string
    user: UsersCreateNestedOneWithoutUserLeaguesInput
  }

  export type UserLeaguesUncheckedCreateWithoutLeagueInput = {
    id?: number
    user_id: number
    joined_at?: Date | string
  }

  export type UserLeaguesCreateOrConnectWithoutLeagueInput = {
    where: UserLeaguesWhereUniqueInput
    create: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput>
  }

  export type UserLeaguesCreateManyLeagueInputEnvelope = {
    data: UserLeaguesCreateManyLeagueInput | UserLeaguesCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutCreatedLeaguesInput = {
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCreatedLeaguesInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCreatedLeaguesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCreatedLeaguesInput, UsersUncheckedCreateWithoutCreatedLeaguesInput>
  }

  export type UserLeaguesUpsertWithWhereUniqueWithoutLeagueInput = {
    where: UserLeaguesWhereUniqueInput
    update: XOR<UserLeaguesUpdateWithoutLeagueInput, UserLeaguesUncheckedUpdateWithoutLeagueInput>
    create: XOR<UserLeaguesCreateWithoutLeagueInput, UserLeaguesUncheckedCreateWithoutLeagueInput>
  }

  export type UserLeaguesUpdateWithWhereUniqueWithoutLeagueInput = {
    where: UserLeaguesWhereUniqueInput
    data: XOR<UserLeaguesUpdateWithoutLeagueInput, UserLeaguesUncheckedUpdateWithoutLeagueInput>
  }

  export type UserLeaguesUpdateManyWithWhereWithoutLeagueInput = {
    where: UserLeaguesScalarWhereInput
    data: XOR<UserLeaguesUpdateManyMutationInput, UserLeaguesUncheckedUpdateManyWithoutLeagueInput>
  }

  export type UsersUpsertWithoutCreatedLeaguesInput = {
    update: XOR<UsersUpdateWithoutCreatedLeaguesInput, UsersUncheckedUpdateWithoutCreatedLeaguesInput>
    create: XOR<UsersCreateWithoutCreatedLeaguesInput, UsersUncheckedCreateWithoutCreatedLeaguesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCreatedLeaguesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCreatedLeaguesInput, UsersUncheckedUpdateWithoutCreatedLeaguesInput>
  }

  export type UsersUpdateWithoutCreatedLeaguesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCreatedLeaguesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutUserLeaguesInput = {
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersUncheckedCreateWithoutUserLeaguesInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersCreateOrConnectWithoutUserLeaguesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUserLeaguesInput, UsersUncheckedCreateWithoutUserLeaguesInput>
  }

  export type LeaguesCreateWithoutUserLeaguesInput = {
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UsersCreateNestedOneWithoutCreatedLeaguesInput
  }

  export type LeaguesUncheckedCreateWithoutUserLeaguesInput = {
    id?: number
    name: string
    description?: string | null
    created_by: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaguesCreateOrConnectWithoutUserLeaguesInput = {
    where: LeaguesWhereUniqueInput
    create: XOR<LeaguesCreateWithoutUserLeaguesInput, LeaguesUncheckedCreateWithoutUserLeaguesInput>
  }

  export type UsersUpsertWithoutUserLeaguesInput = {
    update: XOR<UsersUpdateWithoutUserLeaguesInput, UsersUncheckedUpdateWithoutUserLeaguesInput>
    create: XOR<UsersCreateWithoutUserLeaguesInput, UsersUncheckedCreateWithoutUserLeaguesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUserLeaguesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUserLeaguesInput, UsersUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type UsersUpdateWithoutUserLeaguesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutUserLeaguesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type LeaguesUpsertWithoutUserLeaguesInput = {
    update: XOR<LeaguesUpdateWithoutUserLeaguesInput, LeaguesUncheckedUpdateWithoutUserLeaguesInput>
    create: XOR<LeaguesCreateWithoutUserLeaguesInput, LeaguesUncheckedCreateWithoutUserLeaguesInput>
    where?: LeaguesWhereInput
  }

  export type LeaguesUpdateToOneWithWhereWithoutUserLeaguesInput = {
    where?: LeaguesWhereInput
    data: XOR<LeaguesUpdateWithoutUserLeaguesInput, LeaguesUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type LeaguesUpdateWithoutUserLeaguesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UsersUpdateOneRequiredWithoutCreatedLeaguesNestedInput
  }

  export type LeaguesUncheckedUpdateWithoutUserLeaguesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsCreateWithoutPicksInput = {
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesCreateNestedManyWithoutHome_teamInput
    road_games?: GamesCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesCreateNestedManyWithoutWinning_teamInput
  }

  export type TeamsUncheckedCreateWithoutPicksInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesUncheckedCreateNestedManyWithoutHome_teamInput
    road_games?: GamesUncheckedCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesUncheckedCreateNestedManyWithoutWinning_teamInput
  }

  export type TeamsCreateOrConnectWithoutPicksInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutPicksInput, TeamsUncheckedCreateWithoutPicksInput>
  }

  export type UsersCreateWithoutPicksInput = {
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersUncheckedCreateWithoutPicksInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutUserInput
    weeklyScores?: WeeklyScoresUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersCreateOrConnectWithoutPicksInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPicksInput, UsersUncheckedCreateWithoutPicksInput>
  }

  export type GamesCreateWithoutPicksInput = {
    year: number
    week: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    home_team: TeamsCreateNestedOneWithoutHome_gamesInput
    road_team: TeamsCreateNestedOneWithoutRoad_gamesInput
    winning_team?: TeamsCreateNestedOneWithoutWinning_gamesInput
  }

  export type GamesUncheckedCreateWithoutPicksInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
  }

  export type GamesCreateOrConnectWithoutPicksInput = {
    where: GamesWhereUniqueInput
    create: XOR<GamesCreateWithoutPicksInput, GamesUncheckedCreateWithoutPicksInput>
  }

  export type TeamsUpsertWithoutPicksInput = {
    update: XOR<TeamsUpdateWithoutPicksInput, TeamsUncheckedUpdateWithoutPicksInput>
    create: XOR<TeamsCreateWithoutPicksInput, TeamsUncheckedCreateWithoutPicksInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutPicksInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutPicksInput, TeamsUncheckedUpdateWithoutPicksInput>
  }

  export type TeamsUpdateWithoutPicksInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUpdateManyWithoutWinning_teamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutPicksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUncheckedUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUncheckedUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUncheckedUpdateManyWithoutWinning_teamNestedInput
  }

  export type UsersUpsertWithoutPicksInput = {
    update: XOR<UsersUpdateWithoutPicksInput, UsersUncheckedUpdateWithoutPicksInput>
    create: XOR<UsersCreateWithoutPicksInput, UsersUncheckedCreateWithoutPicksInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutPicksInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutPicksInput, UsersUncheckedUpdateWithoutPicksInput>
  }

  export type UsersUpdateWithoutPicksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPicksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutUserNestedInput
    weeklyScores?: WeeklyScoresUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type GamesUpsertWithoutPicksInput = {
    update: XOR<GamesUpdateWithoutPicksInput, GamesUncheckedUpdateWithoutPicksInput>
    create: XOR<GamesCreateWithoutPicksInput, GamesUncheckedCreateWithoutPicksInput>
    where?: GamesWhereInput
  }

  export type GamesUpdateToOneWithWhereWithoutPicksInput = {
    where?: GamesWhereInput
    data: XOR<GamesUpdateWithoutPicksInput, GamesUncheckedUpdateWithoutPicksInput>
  }

  export type GamesUpdateWithoutPicksInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: TeamsUpdateOneRequiredWithoutHome_gamesNestedInput
    road_team?: TeamsUpdateOneRequiredWithoutRoad_gamesNestedInput
    winning_team?: TeamsUpdateOneWithoutWinning_gamesNestedInput
  }

  export type GamesUncheckedUpdateWithoutPicksInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamsCreateWithoutHome_gamesInput = {
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    road_games?: GamesCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesCreateNestedManyWithoutWinning_teamInput
    picks?: PicksCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutHome_gamesInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    road_games?: GamesUncheckedCreateNestedManyWithoutRoad_teamInput
    winning_games?: GamesUncheckedCreateNestedManyWithoutWinning_teamInput
    picks?: PicksUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutHome_gamesInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutHome_gamesInput, TeamsUncheckedCreateWithoutHome_gamesInput>
  }

  export type TeamsCreateWithoutRoad_gamesInput = {
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesCreateNestedManyWithoutHome_teamInput
    winning_games?: GamesCreateNestedManyWithoutWinning_teamInput
    picks?: PicksCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutRoad_gamesInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesUncheckedCreateNestedManyWithoutHome_teamInput
    winning_games?: GamesUncheckedCreateNestedManyWithoutWinning_teamInput
    picks?: PicksUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutRoad_gamesInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutRoad_gamesInput, TeamsUncheckedCreateWithoutRoad_gamesInput>
  }

  export type TeamsCreateWithoutWinning_gamesInput = {
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesCreateNestedManyWithoutHome_teamInput
    road_games?: GamesCreateNestedManyWithoutRoad_teamInput
    picks?: PicksCreateNestedManyWithoutTeamInput
  }

  export type TeamsUncheckedCreateWithoutWinning_gamesInput = {
    id?: number
    name: string
    geo: string
    stadium: string
    division: string
    conference: string
    logo_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    home_games?: GamesUncheckedCreateNestedManyWithoutHome_teamInput
    road_games?: GamesUncheckedCreateNestedManyWithoutRoad_teamInput
    picks?: PicksUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamsCreateOrConnectWithoutWinning_gamesInput = {
    where: TeamsWhereUniqueInput
    create: XOR<TeamsCreateWithoutWinning_gamesInput, TeamsUncheckedCreateWithoutWinning_gamesInput>
  }

  export type PicksCreateWithoutGameInput = {
    created_at?: Date | string
    updated_at?: Date | string
    team: TeamsCreateNestedOneWithoutPicksInput
    user: UsersCreateNestedOneWithoutPicksInput
  }

  export type PicksUncheckedCreateWithoutGameInput = {
    id?: number
    team_id: number
    user_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksCreateOrConnectWithoutGameInput = {
    where: PicksWhereUniqueInput
    create: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput>
  }

  export type PicksCreateManyGameInputEnvelope = {
    data: PicksCreateManyGameInput | PicksCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type TeamsUpsertWithoutHome_gamesInput = {
    update: XOR<TeamsUpdateWithoutHome_gamesInput, TeamsUncheckedUpdateWithoutHome_gamesInput>
    create: XOR<TeamsCreateWithoutHome_gamesInput, TeamsUncheckedCreateWithoutHome_gamesInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutHome_gamesInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutHome_gamesInput, TeamsUncheckedUpdateWithoutHome_gamesInput>
  }

  export type TeamsUpdateWithoutHome_gamesInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    road_games?: GamesUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutHome_gamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    road_games?: GamesUncheckedUpdateManyWithoutRoad_teamNestedInput
    winning_games?: GamesUncheckedUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUpsertWithoutRoad_gamesInput = {
    update: XOR<TeamsUpdateWithoutRoad_gamesInput, TeamsUncheckedUpdateWithoutRoad_gamesInput>
    create: XOR<TeamsCreateWithoutRoad_gamesInput, TeamsUncheckedCreateWithoutRoad_gamesInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutRoad_gamesInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutRoad_gamesInput, TeamsUncheckedUpdateWithoutRoad_gamesInput>
  }

  export type TeamsUpdateWithoutRoad_gamesInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUpdateManyWithoutHome_teamNestedInput
    winning_games?: GamesUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutRoad_gamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUncheckedUpdateManyWithoutHome_teamNestedInput
    winning_games?: GamesUncheckedUpdateManyWithoutWinning_teamNestedInput
    picks?: PicksUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUpsertWithoutWinning_gamesInput = {
    update: XOR<TeamsUpdateWithoutWinning_gamesInput, TeamsUncheckedUpdateWithoutWinning_gamesInput>
    create: XOR<TeamsCreateWithoutWinning_gamesInput, TeamsUncheckedCreateWithoutWinning_gamesInput>
    where?: TeamsWhereInput
  }

  export type TeamsUpdateToOneWithWhereWithoutWinning_gamesInput = {
    where?: TeamsWhereInput
    data: XOR<TeamsUpdateWithoutWinning_gamesInput, TeamsUncheckedUpdateWithoutWinning_gamesInput>
  }

  export type TeamsUpdateWithoutWinning_gamesInput = {
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUpdateManyWithoutRoad_teamNestedInput
    picks?: PicksUpdateManyWithoutTeamNestedInput
  }

  export type TeamsUncheckedUpdateWithoutWinning_gamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    geo?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    division?: StringFieldUpdateOperationsInput | string
    conference?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_games?: GamesUncheckedUpdateManyWithoutHome_teamNestedInput
    road_games?: GamesUncheckedUpdateManyWithoutRoad_teamNestedInput
    picks?: PicksUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type PicksUpsertWithWhereUniqueWithoutGameInput = {
    where: PicksWhereUniqueInput
    update: XOR<PicksUpdateWithoutGameInput, PicksUncheckedUpdateWithoutGameInput>
    create: XOR<PicksCreateWithoutGameInput, PicksUncheckedCreateWithoutGameInput>
  }

  export type PicksUpdateWithWhereUniqueWithoutGameInput = {
    where: PicksWhereUniqueInput
    data: XOR<PicksUpdateWithoutGameInput, PicksUncheckedUpdateWithoutGameInput>
  }

  export type PicksUpdateManyWithWhereWithoutGameInput = {
    where: PicksScalarWhereInput
    data: XOR<PicksUpdateManyMutationInput, PicksUncheckedUpdateManyWithoutGameInput>
  }

  export type GamesCreateWithoutHome_teamInput = {
    year: number
    week: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    road_team: TeamsCreateNestedOneWithoutRoad_gamesInput
    winning_team?: TeamsCreateNestedOneWithoutWinning_gamesInput
    picks?: PicksCreateNestedManyWithoutGameInput
  }

  export type GamesUncheckedCreateWithoutHome_teamInput = {
    id?: number
    year: number
    week: number
    road_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutGameInput
  }

  export type GamesCreateOrConnectWithoutHome_teamInput = {
    where: GamesWhereUniqueInput
    create: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput>
  }

  export type GamesCreateManyHome_teamInputEnvelope = {
    data: GamesCreateManyHome_teamInput | GamesCreateManyHome_teamInput[]
    skipDuplicates?: boolean
  }

  export type GamesCreateWithoutRoad_teamInput = {
    year: number
    week: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    home_team: TeamsCreateNestedOneWithoutHome_gamesInput
    winning_team?: TeamsCreateNestedOneWithoutWinning_gamesInput
    picks?: PicksCreateNestedManyWithoutGameInput
  }

  export type GamesUncheckedCreateWithoutRoad_teamInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutGameInput
  }

  export type GamesCreateOrConnectWithoutRoad_teamInput = {
    where: GamesWhereUniqueInput
    create: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput>
  }

  export type GamesCreateManyRoad_teamInputEnvelope = {
    data: GamesCreateManyRoad_teamInput | GamesCreateManyRoad_teamInput[]
    skipDuplicates?: boolean
  }

  export type GamesCreateWithoutWinning_teamInput = {
    year: number
    week: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    home_team: TeamsCreateNestedOneWithoutHome_gamesInput
    road_team: TeamsCreateNestedOneWithoutRoad_gamesInput
    picks?: PicksCreateNestedManyWithoutGameInput
  }

  export type GamesUncheckedCreateWithoutWinning_teamInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutGameInput
  }

  export type GamesCreateOrConnectWithoutWinning_teamInput = {
    where: GamesWhereUniqueInput
    create: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput>
  }

  export type GamesCreateManyWinning_teamInputEnvelope = {
    data: GamesCreateManyWinning_teamInput | GamesCreateManyWinning_teamInput[]
    skipDuplicates?: boolean
  }

  export type PicksCreateWithoutTeamInput = {
    created_at?: Date | string
    updated_at?: Date | string
    user: UsersCreateNestedOneWithoutPicksInput
    game: GamesCreateNestedOneWithoutPicksInput
  }

  export type PicksUncheckedCreateWithoutTeamInput = {
    id?: number
    user_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksCreateOrConnectWithoutTeamInput = {
    where: PicksWhereUniqueInput
    create: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput>
  }

  export type PicksCreateManyTeamInputEnvelope = {
    data: PicksCreateManyTeamInput | PicksCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type GamesUpsertWithWhereUniqueWithoutHome_teamInput = {
    where: GamesWhereUniqueInput
    update: XOR<GamesUpdateWithoutHome_teamInput, GamesUncheckedUpdateWithoutHome_teamInput>
    create: XOR<GamesCreateWithoutHome_teamInput, GamesUncheckedCreateWithoutHome_teamInput>
  }

  export type GamesUpdateWithWhereUniqueWithoutHome_teamInput = {
    where: GamesWhereUniqueInput
    data: XOR<GamesUpdateWithoutHome_teamInput, GamesUncheckedUpdateWithoutHome_teamInput>
  }

  export type GamesUpdateManyWithWhereWithoutHome_teamInput = {
    where: GamesScalarWhereInput
    data: XOR<GamesUpdateManyMutationInput, GamesUncheckedUpdateManyWithoutHome_teamInput>
  }

  export type GamesScalarWhereInput = {
    AND?: GamesScalarWhereInput | GamesScalarWhereInput[]
    OR?: GamesScalarWhereInput[]
    NOT?: GamesScalarWhereInput | GamesScalarWhereInput[]
    id?: IntFilter<"Games"> | number
    year?: IntFilter<"Games"> | number
    week?: IntFilter<"Games"> | number
    home_team_id?: IntFilter<"Games"> | number
    road_team_id?: IntFilter<"Games"> | number
    stadium?: StringFilter<"Games"> | string
    time?: DateTimeFilter<"Games"> | Date | string
    winning_team_id?: IntNullableFilter<"Games"> | number | null
    home_score?: IntNullableFilter<"Games"> | number | null
    road_score?: IntNullableFilter<"Games"> | number | null
    is_finalized?: BoolFilter<"Games"> | boolean
    updated_at?: DateTimeFilter<"Games"> | Date | string
  }

  export type GamesUpsertWithWhereUniqueWithoutRoad_teamInput = {
    where: GamesWhereUniqueInput
    update: XOR<GamesUpdateWithoutRoad_teamInput, GamesUncheckedUpdateWithoutRoad_teamInput>
    create: XOR<GamesCreateWithoutRoad_teamInput, GamesUncheckedCreateWithoutRoad_teamInput>
  }

  export type GamesUpdateWithWhereUniqueWithoutRoad_teamInput = {
    where: GamesWhereUniqueInput
    data: XOR<GamesUpdateWithoutRoad_teamInput, GamesUncheckedUpdateWithoutRoad_teamInput>
  }

  export type GamesUpdateManyWithWhereWithoutRoad_teamInput = {
    where: GamesScalarWhereInput
    data: XOR<GamesUpdateManyMutationInput, GamesUncheckedUpdateManyWithoutRoad_teamInput>
  }

  export type GamesUpsertWithWhereUniqueWithoutWinning_teamInput = {
    where: GamesWhereUniqueInput
    update: XOR<GamesUpdateWithoutWinning_teamInput, GamesUncheckedUpdateWithoutWinning_teamInput>
    create: XOR<GamesCreateWithoutWinning_teamInput, GamesUncheckedCreateWithoutWinning_teamInput>
  }

  export type GamesUpdateWithWhereUniqueWithoutWinning_teamInput = {
    where: GamesWhereUniqueInput
    data: XOR<GamesUpdateWithoutWinning_teamInput, GamesUncheckedUpdateWithoutWinning_teamInput>
  }

  export type GamesUpdateManyWithWhereWithoutWinning_teamInput = {
    where: GamesScalarWhereInput
    data: XOR<GamesUpdateManyMutationInput, GamesUncheckedUpdateManyWithoutWinning_teamInput>
  }

  export type PicksUpsertWithWhereUniqueWithoutTeamInput = {
    where: PicksWhereUniqueInput
    update: XOR<PicksUpdateWithoutTeamInput, PicksUncheckedUpdateWithoutTeamInput>
    create: XOR<PicksCreateWithoutTeamInput, PicksUncheckedCreateWithoutTeamInput>
  }

  export type PicksUpdateWithWhereUniqueWithoutTeamInput = {
    where: PicksWhereUniqueInput
    data: XOR<PicksUpdateWithoutTeamInput, PicksUncheckedUpdateWithoutTeamInput>
  }

  export type PicksUpdateManyWithWhereWithoutTeamInput = {
    where: PicksScalarWhereInput
    data: XOR<PicksUpdateManyMutationInput, PicksUncheckedUpdateManyWithoutTeamInput>
  }

  export type UsersCreateWithoutWeeklyScoresInput = {
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersUncheckedCreateWithoutWeeklyScoresInput = {
    id?: number
    name: string
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    picks?: PicksUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeaguesUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeaguesUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UsersCreateOrConnectWithoutWeeklyScoresInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutWeeklyScoresInput, UsersUncheckedCreateWithoutWeeklyScoresInput>
  }

  export type UsersUpsertWithoutWeeklyScoresInput = {
    update: XOR<UsersUpdateWithoutWeeklyScoresInput, UsersUncheckedUpdateWithoutWeeklyScoresInput>
    create: XOR<UsersCreateWithoutWeeklyScoresInput, UsersUncheckedCreateWithoutWeeklyScoresInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutWeeklyScoresInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutWeeklyScoresInput, UsersUncheckedUpdateWithoutWeeklyScoresInput>
  }

  export type UsersUpdateWithoutWeeklyScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutWeeklyScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeaguesUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type PicksCreateManyUserInput = {
    id?: number
    team_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserLeaguesCreateManyUserInput = {
    id?: number
    league_id: number
    joined_at?: Date | string
  }

  export type WeeklyScoresCreateManyUserInput = {
    id?: number
    year: number
    week: number
    correct_picks?: number
    total_picks?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LeaguesCreateManyCreatedByUserInput = {
    id?: number
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamsUpdateOneRequiredWithoutPicksNestedInput
    game?: GamesUpdateOneRequiredWithoutPicksNestedInput
  }

  export type PicksUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesUpdateWithoutUserInput = {
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeaguesUpdateOneRequiredWithoutUserLeaguesNestedInput
  }

  export type UserLeaguesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    league_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresUpdateWithoutUserInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScoresUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    correct_picks?: IntFieldUpdateOperationsInput | number
    total_picks?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaguesUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUpdateManyWithoutLeagueNestedInput
  }

  export type LeaguesUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userLeagues?: UserLeaguesUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeaguesUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesCreateManyLeagueInput = {
    id?: number
    user_id: number
    joined_at?: Date | string
  }

  export type UserLeaguesUpdateWithoutLeagueInput = {
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutUserLeaguesNestedInput
  }

  export type UserLeaguesUncheckedUpdateWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeaguesUncheckedUpdateManyWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksCreateManyGameInput = {
    id?: number
    team_id: number
    user_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PicksUpdateWithoutGameInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamsUpdateOneRequiredWithoutPicksNestedInput
    user?: UsersUpdateOneRequiredWithoutPicksNestedInput
  }

  export type PicksUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamesCreateManyHome_teamInput = {
    id?: number
    year: number
    week: number
    road_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
  }

  export type GamesCreateManyRoad_teamInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    stadium: string
    time: Date | string
    winning_team_id?: number | null
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
  }

  export type GamesCreateManyWinning_teamInput = {
    id?: number
    year: number
    week: number
    home_team_id: number
    road_team_id: number
    stadium: string
    time: Date | string
    home_score?: number | null
    road_score?: number | null
    is_finalized?: boolean
    updated_at?: Date | string
  }

  export type PicksCreateManyTeamInput = {
    id?: number
    user_id: number
    game_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type GamesUpdateWithoutHome_teamInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    road_team?: TeamsUpdateOneRequiredWithoutRoad_gamesNestedInput
    winning_team?: TeamsUpdateOneWithoutWinning_gamesNestedInput
    picks?: PicksUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateWithoutHome_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateManyWithoutHome_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamesUpdateWithoutRoad_teamInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: TeamsUpdateOneRequiredWithoutHome_gamesNestedInput
    winning_team?: TeamsUpdateOneWithoutWinning_gamesNestedInput
    picks?: PicksUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateWithoutRoad_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateManyWithoutRoad_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    winning_team_id?: NullableIntFieldUpdateOperationsInput | number | null
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamesUpdateWithoutWinning_teamInput = {
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: TeamsUpdateOneRequiredWithoutHome_gamesNestedInput
    road_team?: TeamsUpdateOneRequiredWithoutRoad_gamesNestedInput
    picks?: PicksUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateWithoutWinning_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PicksUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GamesUncheckedUpdateManyWithoutWinning_teamInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    week?: IntFieldUpdateOperationsInput | number
    home_team_id?: IntFieldUpdateOperationsInput | number
    road_team_id?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    home_score?: NullableIntFieldUpdateOperationsInput | number | null
    road_score?: NullableIntFieldUpdateOperationsInput | number | null
    is_finalized?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksUpdateWithoutTeamInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutPicksNestedInput
    game?: GamesUpdateOneRequiredWithoutPicksNestedInput
  }

  export type PicksUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PicksUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaguesCountOutputTypeDefaultArgs instead
     */
    export type LeaguesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaguesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GamesCountOutputTypeDefaultArgs instead
     */
    export type GamesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GamesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamsCountOutputTypeDefaultArgs instead
     */
    export type TeamsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaguesDefaultArgs instead
     */
    export type LeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaguesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLeaguesDefaultArgs instead
     */
    export type UserLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLeaguesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PicksDefaultArgs instead
     */
    export type PicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PicksDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GamesDefaultArgs instead
     */
    export type GamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GamesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamsDefaultArgs instead
     */
    export type TeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeeklyScoresDefaultArgs instead
     */
    export type WeeklyScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeeklyScoresDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}